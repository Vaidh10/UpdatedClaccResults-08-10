var jsonResults = {
    "configs": [
        {
            "CC": "/global/homes/v/vaidhy/llvm-project/install/bin/clang",
            "CCFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda"
            ],
            "CC_ACC_Version": "2.7",
            "CPP": "/global/homes/v/vaidhy/llvm-project/install/bin/clang++",
            "CPPFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda"
            ],
            "CPP_ACC_Version": "2.7",
            "FC": "",
            "FCFlags": [],
            "FC_ACC_Version": null,
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/v/vaidhy/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/homes/v/vaidhy/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n13 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n13 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-68a26e.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-68a26e.o: in function `test2':\nacc_async_test.c:(.text+0x12cf): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-68a26e.o: in function `test3':\nacc_async_test.c:(.text+0x17e2): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1e67): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3658744519998436
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-7ce7b2.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-7ce7b2.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36584636000043247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-49cbec.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-49cbec.o: in function `test3':\nacc_async_test.c:(.text+0xc52): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x12d7): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3660354529997676
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-a8485d.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-a8485d.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3659976330000063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n9 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n9 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-102cab.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-102cab.o: in function `test2':\nacc_async_test.c:(.text+0x12cf): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36568444699969405
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-3bade2.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-3bade2.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36606258399979197
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e933c1.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e933c1.o: in function `test3':\nacc_async_test.c:(.text+0xc52): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x12d7): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.365752123999755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-ed4cfe.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-ed4cfe.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3663213459999497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n12 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0650448100000176
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065326143999755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n9 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033296914999937144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06542913700013742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n8 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032862003999980516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06508838999980071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n9 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06528046899984474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06535659100018165
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656924439997965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06546854999987772,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36605449799981216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661579710001206,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36555990499982727
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36620944700007385,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36605489899966415
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161918609998793,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657716310003707
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31608511099966563,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36584129099992424
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163497230001667,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660347720001482
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36598182199986695,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3654742759999863
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31606078599998,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c8 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41602225200040266
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31601483999975244,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2654656609997801
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06566992600028243,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:20:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:24:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) wait(1)\n                             ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:20:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:24:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) wait(1)\n                             ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyin_async-6bea98.o: in function `test1':\nacc_copyin_async.c:(.text+0x13c): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x157): undefined reference to `acc_copyin_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3657282290000694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:74:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:79:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:74:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:79:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyin_async-64d564.o: in function `test2':\nacc_copyin_async.c:(.text+0x11d): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x138): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x1ad): undefined reference to `acc_async_test_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36646843099970283
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:116:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:121:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577871899980892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:165:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:172:9: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyin_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:173:46: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n        #pragma acc exit data delete(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:174:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:182:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait\n                ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03318118900006084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:226:9: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyin_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c:236:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03315394799983551
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26541531700013365
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06541113299999779,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659631079999599
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160724970002775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26561989900028493
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06561918999977934,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) present(c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) present(f[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:41:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:43:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06545505400026741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:67:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:79:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:86:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:87:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06541599100000894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:108:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:110:5: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_set_default_async(def_async_var + 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:121:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:128:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:129:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0330813330001547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:160:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:168:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:169:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n3 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:160:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:168:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c:169:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n3 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyout_async-a8cd72.o: in function `test4':\nacc_copyout_async.c:(.text+0x47f): undefined reference to `acc_copyout_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyout_async.c:(.text+0x69a): undefined reference to `acc_copyout_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.365740521999669
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656475799999498
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06561887999987448,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657545379996918
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31659944200009704,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26559234800015474
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06572380599982353,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:42:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:44:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06523422300006132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:68:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:88:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), def_async_var);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:89:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03336765699987154
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:110:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:112:5: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_set_default_async(def_async_var + 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:124:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:131:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:132:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0336336029999984
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:164:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:171:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:172:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:173:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:164:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:171:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:172:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c:173:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyout_finalize_async-18eb4b.o: in function `test4':\nacc_copyout_finalize_async.c:(.text+0x479): undefined reference to `acc_copyout_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36576313399973515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655980280001131
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0652689260000443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656709140001112
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06567179900002884,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659429799999998
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662711729998591,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36602621600013663
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162972259997332,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660426059996098
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658623090000219,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657117380003001
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31656898400024147,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36546742200016524
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31606427300039286,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657290300002387
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36610860900009357,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657866899999135
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06540610299998662,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:25:9: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_create_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:29:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:36:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:43:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033009237999976904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:77:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:81:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:77:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:81:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_create_async-5168e9.o: in function `test2':\nacc_create_async.c:(.text+0xf0): undefined reference to `acc_create_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_create_async.c:(.text+0x18c): undefined reference to `acc_async_test_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3657038440001088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:118:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:122:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03349603600008777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:166:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:173:9: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_create_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:174:46: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n        #pragma acc exit data delete(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:175:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:183:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait\n                ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03307763599968894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:223:50: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:n]) async(1)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:230:13: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_create_async(c, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:231:50: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:n]) async(1)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:238:51: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n            #pragma acc exit data copyout(c[0:n]) async(1)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c:239:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06523522499992396
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660319880001225
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06588882400001239,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660136009998496
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31585642399977587,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:41:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n7 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06526846700035094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_async-234992.o: in function `test2':\nacc_delete_async.c:(.text+0x614): undefined reference to `acc_delete_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.365906883000207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:41:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03332811399968705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_async-40a461.o: in function `test2':\nacc_delete_async.c:(.text+0x614): undefined reference to `acc_delete_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3659729060000245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580486299999393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661121559998719,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:42:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:46:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n7 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539118499995311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_finalize_async-87373b.o: in function `test2':\nacc_delete_finalize_async.c:(.text+0x697): undefined reference to `acc_delete_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36564206899993223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:42:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:46:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03351394000037544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_finalize_async-6f778b.o: in function `test2':\nacc_delete_finalize_async.c:(.text+0x697): undefined reference to `acc_delete_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36578753000003417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c:25:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c:25:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06526872699987507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660813799998323
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06546579499990912,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_free.c/acc_free.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_free.c:7:29: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_free.c:7:112: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_free.c:10:110: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                             ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652064609998888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_free.c/acc_free.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26543456299987156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06544165900004373,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c:9:18: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int holder = acc_get_default_async();\n                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c:19:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(holder)\n                    ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03327298000021983
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655225270000301
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06574821200001679,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26582181599997057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06573188099991967,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570151099986106
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06589562600038334,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26567137499978344
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06599407099974997,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:12:24: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n                       ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:12:107: error: use of undeclared identifier 'acc_property_memory'\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n                                                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:13:107: error: use of undeclared identifier 'acc_property_free_memory'\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:14:28: warning: implicit declaration of function 'acc_get_property_string' is invalid in C99 [-Wimplicit-function-declaration]\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:14:118: error: use of undeclared identifier 'acc_property_name'\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n                                                                                                                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:15:118: error: use of undeclared identifier 'acc_property_vendor'\n        returned_string2 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_vendor);\n                                                                                                                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c:16:118: error: use of undeclared identifier 'acc_property_driver'\n        returned_string3 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_driver);\n                                                                                                                     ^\n2 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06524062500011496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_property.c/acc_get_property.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579353299985087
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656618409998373,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653452859999561
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163367010001821,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_init.c/acc_init.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_init.c:8:9: warning: implicit declaration of function 'acc_init' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_init(acc_get_device_type());\n        ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_init.c:8:9: warning: implicit declaration of function 'acc_init' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_init(acc_get_device_type());\n        ^\n1 warning generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_init-c2a081.o: in function `test1':\nacc_init.c:(.text+0x2b): undefined reference to `acc_init'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658247610002036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_init.c/acc_init.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2662293270000191
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653094230001443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3154014349997851
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31622105500036923,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c:6:29: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c:6:112: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c:12:110: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                             ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06514307300039945
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656994570002098
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06575406299998576,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3654801360003148
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6667683450000368,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660906159998376
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6664771420000761,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36653742899989084
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7176015340000959,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661483830001089
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7168601399998806,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36638539600016884
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36637525700007245,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662118420002116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: invalid argument \nCUDA error: invalid argument \nOMP: Error #334: acc_memcpy_device failed\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.36585171999968225,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658636630003457
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0651525009998295,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c:20:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c:20:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03337654400002066
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655521219999173
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06554040399987571,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:32:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:41:9: warning: implicit declaration of function 'acc_memcpy_from_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_memcpy_from_device_async(a, devdata, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:50:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:58:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(5)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:66:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3) wait(1, 2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:74:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(6) wait(4, 5)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:32:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:84:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(1)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:90:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(2)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:96:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(4)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:102:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(5)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:108:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:114:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(6)\n                ^\n8 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0659363330000815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657179919997361
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06532536300028369,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c:24:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c:24:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06610844400029237
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26598757500005377
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06600850699987859,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:37:5: warning: implicit declaration of function 'acc_memcpy_to_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_memcpy_to_device_async(devdata, a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:44:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:46:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:53:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:60:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:67:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(5)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:74:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3) wait(1, 2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:81:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(6) wait(4, 5)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:44:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:90:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update host(hostdata[2*n:n]) async(3)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:91:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update host(hostdata[5*n:n]) async(6)\n                                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:100:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(6)\n                ^\n10 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06548579199989035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658363929999723
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06545757899993987,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3674203769996893
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158683770002426,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c:22:9: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_set_default_async(1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c:23:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03291803800038906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653733690003719
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0654643920001945,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655861649999679
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165599270000712,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655818769999314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06559993500013661,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c:8:9: warning: implicit declaration of function 'acc_shutdown' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_shutdown(acc_get_device_type());\n        ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c:8:9: warning: implicit declaration of function 'acc_shutdown' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_shutdown(acc_get_device_type());\n        ^\n1 warning generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_shutdown-4cec31.o: in function `test1':\nacc_shutdown.c:(.text+0x2b): undefined reference to `acc_shutdown'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658599490000597
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2651822370003174
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06559401799995612,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36583805400005076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6665553950001595,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657810080003401
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.717234427999756,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36611814699972456
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6668366690000767,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663471939998999
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.766973097999653,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658101720002378
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663991509997686,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656697900000836
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162098509997122,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:33:9: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:49:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:56:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n8 warnings and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513087299981635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06533161800007292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:33:9: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:49:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:56:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033328686999993806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03303859400011788
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659368799999356
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664461990001655,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:45:9: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:47:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n9 warnings and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06527036299985411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n6 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529176300000472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:45:9: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:47:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06593398299992259
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n6 warnings and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529844599981516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:38:5: warning: implicit declaration of function 'acc_wait' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_wait(1);\n    ^\n6 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c:38:5: warning: implicit declaration of function 'acc_wait' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_wait(1);\n    ^\n6 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_wait-bfc106.o: in function `test1':\nacc_wait.c:(.text+0x7a1): undefined reference to `acc_wait'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3656556740002088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26590956400013965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06524306199980856,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:26:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:33:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:47:9: warning: implicit declaration of function 'acc_wait_all' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all();\n        ^\n4 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:26:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:33:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c:47:9: warning: implicit declaration of function 'acc_wait_all' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all();\n        ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_wait_all-27abeb.o: in function `test1':\nacc_wait_all.c:(.text+0x67b): undefined reference to `acc_wait_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3658287569996901
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26580516900003204
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06538391499998397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:47:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:54:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:61:9: warning: implicit declaration of function 'acc_wait_all_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all_async(4);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:62:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:69:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:75:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:81:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:88:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c:95:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(4)\n                    ^\n9 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033065243999772065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656649980003749
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06546741100009967,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:30:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:37:9: warning: implicit declaration of function 'acc_wait_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_async(1, 2);\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:45:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:53:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c:60:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n5 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314897000018391
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26548737599978267
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06587018300024283,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitand_equals.c/atomic_bitand_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36559122500011654
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36752190599963797,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitor_equals.c/atomic_bitor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656402850001541
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3155789940001341,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitxor_equals.c/atomic_bitxor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660189209999771
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165935269998954,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitand_equals.c/atomic_capture_bitand_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitand_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667082990000381
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3660952739996901,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitor_equals.c/atomic_capture_bitor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661334960002023
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316116306999902,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitxor_equals.c/atomic_capture_bitxor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36574930899996616
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164440180003112,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_divided_equals.c/atomic_capture_divided_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660039639999013
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31605752699988443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitand_x.c/atomic_capture_expr_bitand_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655348679999406
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3662771240001348,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658993389999523
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_capture_expr_bitor_x.c:58:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6673259530002724,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26553640800011635
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0654221569998299,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitxor_x.c/atomic_capture_expr_bitxor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365290522000123
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3661139800001365,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_divided_x.c/atomic_capture_expr_divided_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660504409999703
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3660988910000924,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_lshift_x.c/atomic_capture_expr_lshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658797620000769
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31550421500014636,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_minus_x.c/atomic_capture_expr_minus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658989690002272
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36619759499990323,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_multiply_x.c/atomic_capture_expr_multiply_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659922719998576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36613266399990607,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_plus_x.c/atomic_capture_expr_plus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655455279999842
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3157462960002704,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_rshift_x.c/atomic_capture_expr_rshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36595333900004334
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663637459999336,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_lshift_equals.c/atomic_capture_lshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656657520000408
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665083659998345,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36558322900009443
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_capture_minus_equals.c:55:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7173149299997021,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657674990000487
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06591203100015264,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_multiply_equals.c/atomic_capture_multiply_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36565731700011384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3164763380000295,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_plus_equals.c/atomic_capture_plus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36555644899999606
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3167394500001137,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postdecrement.c/atomic_capture_postdecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659266300001036
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31630784400022094,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postincrement.c/atomic_capture_postincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36571288999994067
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164338800002042,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_predecrement.c/atomic_capture_predecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36563754000007975
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31599555100001453,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_preincrement.c/atomic_capture_preincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36569463699970584
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159271539998372,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_rshift_equals.c/atomic_capture_rshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_capture_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36566775700021026
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166184839997186,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_divided_equals.c/atomic_divided_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4158305770001789
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 2.3200315000003684,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitand_x.c/atomic_expr_bitand_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4662469410000085
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 3.2252557619999607,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitor_x.c/atomic_expr_bitor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.417023522999898
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 1.518531468999754,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitxor_x.c/atomic_expr_bitxor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165099850001752
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.7683182769997075,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x.c/atomic_expr_divided_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163035299998228
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166619380002885,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_lshift_x.c/atomic_expr_lshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580651600024794
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.315897147999749,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x.c/atomic_expr_minus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665040669998234
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157913710001594,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_multiply_x.c/atomic_expr_multiply_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661942089997865
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31600299499996254,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_plus_x.c/atomic_expr_plus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36555030799991073
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.365998263000165,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_rshift_x.c/atomic_expr_rshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658761649999178
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167181300000266,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_lshift_equals.c/atomic_lshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36591342500014434
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158613309997236,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_minus_equals.c/atomic_minus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36608516500018595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162915340003565,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_multiply_equals.c/atomic_multiply_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36608649799973136
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316581215000042,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_plus_equals.c/atomic_plus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655023080000319
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31599483999980293,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postdecrement.c/atomic_postdecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655441559999417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31629161299997577,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postincrement.c/atomic_postincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36523374699982014
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31592786500004877,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_predecrement.c/atomic_predecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656909199999063
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31629441899985977,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_preincrement.c/atomic_preincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657343610002499
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665505660001145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_rshift_equals.c/atomic_rshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660361140000532
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31554953899967586,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_assign.c/atomic_structured_assign_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: note: use function 'fabs' instead\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^~~\n            fabs\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: note: use function 'fabs' instead\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^~~\n            fabs\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: note: use function 'fabs' instead\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^~~\n            fabs\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: note: use function 'fabs' instead\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^~~\n            fabs\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3654311450000023
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161783430000469,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitand_equals.c/atomic_structured_assign_bitand_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36533190099999047
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3165046609997262,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitor_equals.c/atomic_structured_assign_bitor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36581692500021745
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31592026099997383,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitxor_equals.c/atomic_structured_assign_bitxor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36629613000013705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3165885180001169,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_divided_equals.c/atomic_structured_assign_divided_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658974960003434
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31625825199989777,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitand_x.c/atomic_structured_assign_expr_bitand_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659511449995989
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3158022809998329,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitor_x.c/atomic_structured_assign_expr_bitor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658091400002377
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31608639099977154,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitxor_x.c/atomic_structured_assign_expr_bitxor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36562304200015205
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3161765799995919,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_divided_x.c/atomic_structured_assign_expr_divided_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: note: use function 'fabs' instead\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^~~\n                       fabs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: note: use function 'fabs' instead\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^~~\n                       fabs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658209419995728
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165672979998817,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_multiply_x.c/atomic_structured_assign_expr_multiply_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657517840001674
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3162025880001238,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_plus_x.c/atomic_structured_assign_expr_plus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36584430699986115
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3657840030000443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_lshift_equals.c/atomic_structured_assign_lshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36593290099972364
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31645009900012155,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656622169996808
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_structured_assign_minus_equals.c:55:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6670858550000958,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26626745200019286
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06554726000013034,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_multiply_equals.c/atomic_structured_assign_multiply_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36589789700019537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3160552630001803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_plus_equals.c/atomic_structured_assign_plus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660316270002113
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31597568400002274,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postdecrement.c/atomic_structured_assign_postdecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658349190000081
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163548920001631,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postincrement.c/atomic_structured_assign_postincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656247760000042
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36636920699993425,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_predecrement.c/atomic_structured_assign_predecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36596499099960056
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31598400099983337,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_preincrement.c/atomic_structured_assign_preincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365826110999933
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36686685499989835,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_rshift_equals.c/atomic_structured_assign_rshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657791840000755
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158182810002472,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitand_expr.c/atomic_structured_assign_x_bitand_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36568770399981076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31589095099980113,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitor_expr.c/atomic_structured_assign_x_bitor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36606678499992995
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31607277100010833,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitxor_expr.c/atomic_structured_assign_x_bitxor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36581273100000544
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3166079190000346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_divided_expr.c/atomic_structured_assign_x_divided_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36612274000026446
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31557370899963644,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_lshift_expr.c/atomic_structured_assign_x_lshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36554982100005873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161681880001197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:59:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:60:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:60:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06538312300017424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26586947500027236
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06586939999988317,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_multiply_expr.c/atomic_structured_assign_x_multiply_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36632987699977093
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3160981169999104,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_plus_expr.c/atomic_structured_assign_x_plus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659239690000504
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.366231021999738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_rshift_expr.c/atomic_structured_assign_x_rshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36603111799968246
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31569470599970373,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitand_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitand_equals_assign.c/atomic_structured_bitand_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662208020000435
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3164613660001123,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitor_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitor_equals_assign.c/atomic_structured_bitor_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitor_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658705880002344
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31620913500000825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitxor_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitxor_equals_assign.c/atomic_structured_bitxor_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660973220003143
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3163626909999948,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_divided_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_divided_equals_assign.c/atomic_structured_divided_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_divided_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580030799996166
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159421459999976,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitand_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitand_x_assign.c/atomic_structured_expr_bitand_x_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36591408000003867
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36596856100004516,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitor_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitor_x_assign.c/atomic_structured_expr_bitor_x_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitor_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655883820001691
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3154365130003498,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitxor_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitxor_x_assign.c/atomic_structured_expr_bitxor_x_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36584748599989325
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.316474339999786,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_multiply_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_multiply_x_assign.c/atomic_structured_expr_multiply_x_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657562359999247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3159709500000645,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_plus_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_plus_x_assign.c/atomic_structured_expr_plus_x_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_plus_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36555967899994357
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31639588300004107,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_lshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_lshift_equals_assign.c/atomic_structured_lshift_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36620089500001995
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31582200299999386,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_minus_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36542659099995944
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_structured_minus_equals_assign.c:55:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7169613370001571,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659071349999067
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0655018040001778,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_multiply_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_multiply_equals_assign.c/atomic_structured_multiply_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661457930002143
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.41640514199980316,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_plus_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_plus_equals_assign.c/atomic_structured_plus_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_plus_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36596356299969557
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3166136009999718,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postdecrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postdecrement_assign.c/atomic_structured_postdecrement_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postdecrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659058749999531
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662991689998307,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postincrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postincrement_assign.c/atomic_structured_postincrement_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postincrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656790820000424
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31589392700016106,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_predecrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_predecrement_assign.c/atomic_structured_predecrement_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_predecrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662329559997488
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168597690000752,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_preincrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_preincrement_assign.c/atomic_structured_preincrement_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_preincrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662070379996294
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31647431999999753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_rshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_rshift_equals_assign.c/atomic_structured_rshift_equals_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365836106000188
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160634820001178,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitand_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitand_expr_assign.c/atomic_structured_x_bitand_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36593021999988196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3162923610002508,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitor_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitor_expr_assign.c/atomic_structured_x_bitor_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitor_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659736720001092
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31593189800014443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitxor_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitxor_expr_assign.c/atomic_structured_x_bitxor_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661594180002794
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3160910340002374,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_divided_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_divided_expr_assign.c/atomic_structured_x_divided_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_divided_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659212640000078
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36619469399965965,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_lshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_lshift_expr_assign.c/atomic_structured_x_lshift_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36618054800010214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36617366500013304,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_minus_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662702149999859
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_structured_x_minus_expr_assign.c:55:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6175798389999727,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2654614540001603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06522604000019783,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_multiply_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_multiply_expr_assign.c/atomic_structured_x_multiply_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36594639099985216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31611986899997646,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_plus_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_plus_expr_assign.c/atomic_structured_x_plus_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_plus_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656861250001384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3159279000001334,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_rshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_rshift_expr_assign.c/atomic_structured_x_rshift_expr_assign.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365583843999957
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31613068800015753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitand_equals.c/atomic_update_bitand_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36617519700030243
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661888229999022,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitor_equals.c/atomic_update_bitor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36585996899975726
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3159148360000472,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitxor_equals.c/atomic_update_bitxor_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36607572299999447
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160095530001854,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_divided_equals.c/atomic_update_divided_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36584873800029527
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162153869998292,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitand_x.c/atomic_update_expr_bitand_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36563515999978335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3170041590001347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitor_x.c/atomic_update_expr_bitor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658794970001509
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31670268500010934,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitxor_x.c/atomic_update_expr_bitxor_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36587759200028813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165376679999099,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x.c/atomic_update_expr_divided_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658291110000391
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161519479999697,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_lshift_x.c/atomic_update_expr_lshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36559193899984166
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31565248600009,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x.c/atomic_update_expr_minus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36594681099995796
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158460869999544,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_multiply_x.c/atomic_update_expr_multiply_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660431210000752
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162637969999196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_plus_x.c/atomic_update_expr_plus_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36610814200003006
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31671635199973025,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_rshift_x.c/atomic_update_expr_rshift_x.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658903260002262
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41596457099967665,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_lshift_equals.c/atomic_update_lshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36577243600004294
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166040119999707,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_minus_equals.c/atomic_update_minus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659185480000815
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31598385500001314,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_multiply_equals.c/atomic_update_multiply_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36638036100021054
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164594820000275,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_plus_equals.c/atomic_update_plus_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659881180001321
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316456818000006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postdecrement.c/atomic_update_postdecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661368660000335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36694994299978134,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postincrement.c/atomic_update_postincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36557165199974406
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161380920000738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_predecrement.c/atomic_update_predecrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36615758500011
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162296030000107,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_preincrement.c/atomic_update_preincrement.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36565456600010293
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31596145200001047,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_rshift_equals.c/atomic_update_rshift_equals.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658895650000886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31633055200018134,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitand_expr.c/atomic_update_x_bitand_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658027030000994
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3166403499999433,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitor_expr.c/atomic_update_x_bitor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36587925499998164
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3161778859998776,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitxor_expr.c/atomic_update_x_bitxor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366083276000154
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161199989999659,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_divided_expr.c/atomic_update_x_divided_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36568939100015996
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31627300500031197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_lshift_expr.c/atomic_update_x_lshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661637159998463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661060180002096,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_minus_expr.c/atomic_update_x_minus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36585536099983074
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158573780001461,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_multiply_expr.c/atomic_update_x_multiply_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655876210000315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31624116500006494,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_plus_expr.c/atomic_update_x_plus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659954720001224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31598967500030994,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_rshift_expr.c/atomic_update_x_rshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36588491600014095
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3169182169999658,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitand_expr.c/atomic_x_bitand_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658636669997577
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3162290820000635,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitor_expr.c/atomic_x_bitor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659857739999097
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31662643400022716,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitxor_expr.c/atomic_x_bitxor_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655511829997522
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316242346999843,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_divided_expr.c/atomic_x_divided_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36569446100020286
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163232279998738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_lshift_expr.c/atomic_x_lshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36607167500005744
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31625270599988653,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_minus_expr.c/atomic_x_minus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656982779998543
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158210209999197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_multiply_expr.c/atomic_x_multiply_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41646994499978973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.317231731999982,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_plus_expr.c/atomic_x_plus_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36592223500019827
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31607434300030945,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_rshift_expr.c/atomic_x_rshift_expr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/atomic_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659185090000392
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163159639998412,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copy_no_lower_bound.c/data_copy_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3653925070002515
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31617827699983536,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyin_no_lower_bound.c/data_copyin_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36596524600008706
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661251040002753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_no_lower_bound.c/data_copyout_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36570661299992935
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160887809999622,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657186760001423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31647180499976457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41575259500041284
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\ndata_create.c:81:13: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6168602969996755,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662533239998993
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\ndata_create.c:81:13: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7173094979998496,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662619800002176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31650518700007524,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create_no_lower_bound.c/data_create_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656438960001651
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165616319997753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_present_no_lower_bound.c/data_present_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656687529996816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31600281999999424,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_changing_subscript.c/data_with_changing_subscript.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3653458399999181
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31640422800001033,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_structs.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_structs.c/data_with_structs.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/data_with_structs.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656825379998736
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164342459999716,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334830100038744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03300345899970125
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03420079299985446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033693757000037294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03300426099985998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:177:43: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n]) attach(datapointer)\n                                          ^\n1 warning and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033159660000364966
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033225743000002694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033515784999963216
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03320177900013732
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317082100011248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033145682999929704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03324241500013159
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:192:37: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n]) attach(datapointer)\n                                    ^\n1 warning and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314275799993993
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032993419999911566
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_device_resident.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033012093999786885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033456624999871565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317345599998589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03341278299967598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03325653100000636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03323169399982362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033331189999898925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033270987999912904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0337380400001166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06534407900016959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317935699988084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0334270190001007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032824634999997215
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03376688299977104
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03303528800006461
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311549799991553
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301453899985063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03284239799995703
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032809245999942505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033208330999968894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03287030000001323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0646635600000991
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033219340999949054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03381876999992528
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03312011600019105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03321999199988568
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033241402999919956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03288455599977169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033225321999907464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06565291700007947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03345725500003027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03333470699999452
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03315587399993092
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03309476899994479
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033218278999811446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033204132999799185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301663299998836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03312554500007536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03318587900002967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033382306000021345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314186699981292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03351045499994143
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329709580000781
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033066907999909745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_copyin_no_lower_bound.c/enter_data_copyin_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659738110000035
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36619918299993515,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161062849998416
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162588769996546,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create_no_lower_bound.c/enter_data_create_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36579054100002395
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164606940003978,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_exit_data_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653492540002844
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06558608100021956,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:19:51: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n    #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:30:50: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(dev)\n                                                 ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06505173399955311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:59:51: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n    #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:70:50: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(host)\n                                                 ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03302867599995807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:112:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n                                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:127:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(dev)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033066245000100025
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:168:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(host)\n                                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:185:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03306836000001567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:226:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n                                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c:237:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03318538800021997
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26565365199985536
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06583043699993141,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.c/exit_data.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655542589999641
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659469720000743,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_no_lower_bound.c/exit_data_copyout_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656211640000038
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163446569997177,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662515500000154
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159090839999408,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_delete_no_lower_bound.c/exit_data_delete_no_lower_bound.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656409810000696
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31638497299991286,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c:77:66: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n                                                                 ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c:77:66: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n                                                                 ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3655867699999362
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.31676412000024357,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/host_data.c/host_data.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/host_data.c:22:17: error: unknown or unsupported OpenACC directive\n    #pragma acc host_data use_device(a)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06550616200001969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/host_data.c/host_data.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656684200001109
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551755400005277,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/init.c/init.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03292784799987203
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init.c/init.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570685200022126
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0659037239997815,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_num.c/init_device_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06522830399990198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_num.c/init_device_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26632362300006207
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06541220799999792,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type.c/init_device_type.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(host)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06575998700009222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type.c/init_device_type.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26618222800016156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06565563100002691,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(host) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06566231499982678
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26615727199987305
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06547491299988906,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(nvidia) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03332390600007784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26553709499967226
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06550207500004035,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_nvidia.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033071383999867976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26561951999974553
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06558866599971225,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c:15:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num == device_num)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03286176399979013
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033127269000033266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c:15:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num == device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033230402000299364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032939749999968626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_async.c/kernels_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels async(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels async(2)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:41:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels wait(1, 2) async(3)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:43:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:49:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(1, 2)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:51:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(g[0:n]) async(3)\n                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c:60:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n1 warning and 8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06484255400027905
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_async.c/kernels_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658338689998345
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06587072299998908,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539520500018625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0333149590001085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033076565000101255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03315030300018407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03346161299987216
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03319460600005186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03308815599984882
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314521299989792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653106269996897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033555508999597805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317974699984916
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03327265100006116
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03325189199995293
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032915945000240754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03298332100030166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033081262999985483
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03316736500028128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329616089998126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317059099981634
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033242063999750826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033323806999760563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03330311699983213
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03309448899972267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033175278999806324
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03312591699977929
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329709580000781
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317974699984916
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03294427800028643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03330546200004392
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03296901400017305
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03299124499972095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03267840200032879
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels default(present)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033390670999779104
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657800789997964
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.065623530999801,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658773289999772
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06524860199988325,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03279748400018434
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:52:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:54:9: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334246099984739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:100:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:102:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0331571549995715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:151:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c:153:13: error: function 'test4' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033312905999991926
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656711150002593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656095260001166,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.c/kernels_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels loop copy(a[0:1024]) copyout(b[0:1024])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06496678599978623
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.c/kernels_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2661286479997216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06543691299975762,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop independent\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06581479799979206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26605127399989215
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06591258100024788,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(+:total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06533847900027467
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26659334499981924
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06595871800027453,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(avg)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(+:avg)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03330012100013846
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26563876499994876
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06604804300013711,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(+:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06500747199970647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659567780001453
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06608146600001419,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(&&:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03281181100010144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656485630000134
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06556029400007901,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:40:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311175999988336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26566552500025864
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06549025200001779,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03335511500017674
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655134500000713
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653893550002067,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(&:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06546932299988839
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2654675750000024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06561470599990571,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:30:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(&:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:28:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:38:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:28:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06562368100003368
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26565641700017295
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0655128359999253,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:29:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(c)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&:c)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:27:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03282108799976413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26557815199976176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06565414800024882,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(|:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03290700899970034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656917029999022
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656896250002319,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:37:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:42:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653497910002443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26652220200003285
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06587044299976696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:28:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:31:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:26:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301489000023139
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26549029799980417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06559199200000876,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(^:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03291220800019801
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656059930000083
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551365599989367,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03285404899997957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657905179999034
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.065867537000031,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652087879998362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26620880800010127
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06565834699995321,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(max:max)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033333174000290455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655311229996187
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0655078049999247,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311153999993621
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26555213299980096
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06546246099969721,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03328835100001015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655388769999263
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06569758999967235,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(min:min)\n                    ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03356663900012791
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03304850299991813
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:24:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop reduction(min:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311590800012709
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660660319997987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06564759699995193,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(min:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033087575000081415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2654892559999098
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551774399986243,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(*:multiplied_total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334688000040842
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26559172699990086
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0650574249998499,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:25:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311451500030671
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655518319998009
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06595947799996793,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03304454599992823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657141749996299
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06597717100021327,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: note: place parentheses around the assignment to silence this warning\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n                ^\n           (                                                )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: note: use '==' to turn this assignment into an equality comparison\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n                ^\n                ==\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(||:result)\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032786574000056135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26577202299995406
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06544421699982195,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033028996999746596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657679159997315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656867190000412,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:21:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03283732899990355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2661405110002306
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653309550002632,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.c:18:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop seq\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317613099989103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656015349998597
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06569074700018973,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c:21:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06542916900025375
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032990174000133266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c:21:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0334206880002057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03339418699988528
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03308909899988066
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660278200000903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06612535699969158,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop worker\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop worker\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03307022400031201
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2662547039999481
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06555123699990872,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_gangs.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_gangs.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop num_gangs(16)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06534549299976788
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265824891000193
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06571825800028819,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_workers.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_workers.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop num_workers(16)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03290504400001737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26582623500007685
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06542766599977767,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_present.c/kernels_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_present.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_present.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06547553499967762
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_present.c/kernels_present.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659294179998142
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06532411199987109,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_scalar_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels num_gangs(1) vector_length(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c:24:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03312664900022355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570518899961826
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06536760299968591,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_vector_length.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels vector_length(16)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03330904799986456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655397799999264
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551502899992556,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_wait.c/kernels_wait.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c:17:59: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels wait(1)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033604830999593105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_wait.c/kernels_wait.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26587889299980816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06530725099992196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.c/loop_collapse.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36578134399997
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36705797500007975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse_default.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_no_collapse_default.c/loop_no_collapse_default.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse_default.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659600359997057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31655858700014505,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel.c/parallel.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657811920002132
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31651582699987557,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_async.c/parallel_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:41:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel wait(1, 2) async(3)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:48:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(c[0:n]) async(1)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:49:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(f[0:n]) async(2)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:50:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(g[0:n]) async(3)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:52:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:58:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c:64:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(3)\n                    ^\n6 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329616009998972
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_async.c/parallel_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653422920002413
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06626925700038555,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copy.c/parallel_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36577316800003246
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31637815000021874,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659152019999965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662921860000097,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36585058299988304
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161104810001234,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_create.c/parallel_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656455199998163
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31637393300024996,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36582911200002854
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31619190299988986,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_present.c/parallel_default_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_default_present.c:13:26: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel default(present)\n                         ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_default_present.c:13:26: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel default(present)\n                         ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656356620003862
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31598138000026665,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c:20:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel deviceptr(b)\n                             ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c:20:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel deviceptr(b)\n                             ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36587449600028776
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_deviceptr.c:20:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7174523829999089,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659383830000479
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06545854299974962,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c:24:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06547941300004823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03355745199996818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c:24:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033422880999751214
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03304599800003416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06531775100029336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06576856300034706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033323123999707605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0328625759998431
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06569217900005242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301279600009366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301623200013637
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334465500029182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365881588999855
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161279440000726,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_capture.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_capture.c/parallel_independent_atomic_capture.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_capture.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580305400002544
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31629312199993365,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_read.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_read.c/parallel_independent_atomic_read.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_read.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36606886900017344
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31617267699994045,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_update.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_update.c/parallel_independent_atomic_update.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_update.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658921989999726
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161119329997746,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_write.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_write.c/parallel_independent_atomic_write.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_write.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657968920001622
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161661340000137,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.c/parallel_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664991219998228
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36609506800004965,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c:27:39: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n            #pragma acc parallel loop async(x)\n                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c:31:39: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n            #pragma acc parallel loop async(x) reduction(+:errors[x])\n                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c:38:17: error: unknown or unsupported OpenACC directive\n                                #pragma acc wait\n                                            ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0654326349999792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579653899989353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0655919430000722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3155226730000322
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.3657681390000107,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_gang.c/parallel_loop_gang.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36567408300015813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31648045200017805,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665043020000667
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_independent.c:16:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7169904120000865,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660014709999814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06542964000027496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent_reduction.c/parallel_loop_independent_reduction.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41601702899970405
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162609720002365,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c:57:47: error: subarray is not supported in 'reduction' clause\n        #pragma acc parallel loop reduction(+:c[0:10])\n                                              ^~~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06534061299998939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c:57:47: error: subarray is not supported in 'reduction' clause\n        #pragma acc parallel loop reduction(+:c[0:10])\n                                              ^~~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03300755600002958
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161978160000217
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159594889998516,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt1.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26565076700035206
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06555563500023709,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41567662400029803
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665177670000048,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4156680870000855
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160929579998992,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41618088399991393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31639543199980835,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41591921600002024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167104010003641,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41575554100018053
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159918200003631,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416438214000209
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161239759997443,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4158492359997581
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160643149999487,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c8 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41621980800027814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662771280000925,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c9 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5661186070001349
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165540189997955,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt2.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2661220160002813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06555873200022688,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4158312329996079
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160523920000742,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164770669999598
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161864520002382,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160442289999082
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666765130001295,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416139177000332
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31652962399994067,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159293749999051
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 16,
                    "runtime": 0.3161716449999403,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41653078700028345
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31645283999978346,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c:232:13: error: 'total' requires 128 bit size 'long double' type support, but target 'nvptx64-nvidia-cuda' does not support it\n            total += a[x] + b[x];\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c:220:17: note: 'total' defined here\n    long double total = 10;\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11534083000015016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c8 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_add_general_type_check_pt2-26dcb7.o: in function `.omp_outlined.':\nparallel_loop_reduction_add_general_type_check_pt2.c:(.text+0x8ed): undefined reference to `__atomic_load'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: parallel_loop_reduction_add_general_type_check_pt2.c:(.text+0x962): undefined reference to `__atomic_compare_exchange'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4161966339997889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c9 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516458244000205
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 16,
                    "runtime": 0.3667040640002597,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt3.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x64c7ef8: ch = store<(store (s80) into %ir.28, align 16)> 0x64d3540, 0x64c84a8, 0x64c8098, undef:i64\n  0x64c84a8: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x69904d8, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x66729b0: i64 = ConstantPool<float 0.000000e+00> 0\n    0x64c8100: i64 = undef\n  0x64c8098: i64 = add nuw 0x6672ae8, Constant:i64<16>\n    0x6672ae8: i64,ch,glue = NVPTXISD::ProxyReg 0x64c7f60, 0x64c7fc8, 0x64c7f60:1\n      0x64c7fc8: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x64c7a18, Constant:i32<1>, Constant:i32<0>, 0x64c7a18:1\n        0x64d3880: i32 = Constant<1>\n        0x64d34d8: i32 = Constant<0>\n        0x64c7a18: ch,glue = NVPTXISD::CallArgEnd 0x6672190, Constant:i32<1>, 0x6672190:1\n          0x64d3880: i32 = Constant<1>\n          0x6672190: ch,glue = NVPTXISD::LastCallArg 0x64c7e28, Constant:i32<1>, Constant:i32<0>, 0x64c7e28:1\n            0x64d3880: i32 = Constant<1>\n            0x64d34d8: i32 = Constant<0>\n            0x64c7e28: ch,glue = NVPTXISD::CallArgBegin 0x64c8030, 0x64c8030:1\n              0x64c8030: ch,glue = NVPTXISD::CallVoid 0x64c82a0, 0x64c8578, 0x64c82a0:1\n                0x64c8578: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x64c7b50: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x64c82a0: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c8370, Constant:i32<1>, 0x64c8370:1\n                  0x64d3880: i32 = Constant<1>\n                  0x64c8370: ch,glue = NVPTXISD::DeclareRet 0x64c8308, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x64c8308:1\n\n\n\n\n      0x64c7f60: ch,glue = callseq_end 0x64c7fc8:1, TargetConstant:i64<25>, TargetConstant:i64<26>, 0x64c7fc8:2\n        0x64d2e58: i64 = TargetConstant<25>\n        0x64d2d20: i64 = TargetConstant<26>\n        0x64c7fc8: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x64c7a18, Constant:i32<1>, Constant:i32<0>, 0x64c7a18:1\n          0x64d3880: i32 = Constant<1>\n          0x64d34d8: i32 = Constant<0>\n          0x64c7a18: ch,glue = NVPTXISD::CallArgEnd 0x6672190, Constant:i32<1>, 0x6672190:1\n            0x64d3880: i32 = Constant<1>\n            0x6672190: ch,glue = NVPTXISD::LastCallArg 0x64c7e28, Constant:i32<1>, Constant:i32<0>, 0x64c7e28:1\n              0x64d3880: i32 = Constant<1>\n              0x64d34d8: i32 = Constant<0>\n              0x64c7e28: ch,glue = NVPTXISD::CallArgBegin 0x64c8030, 0x64c8030:1\n                0x64c8030: ch,glue = NVPTXISD::CallVoid 0x64c82a0, 0x64c8578, 0x64c82a0:1\n                  0x64c8578: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x64c82a0: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c8370, Constant:i32<1>, 0x64c8370:1\n\n\n    0x64d3818: i64 = Constant<16>\n  0x64c8100: i64 = undef\nIn function: __omp_outlined__1\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/install/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": false,
                    "output": "",
                    "result": 70,
                    "runtime": 0.1655316619999212
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x671fbf8: ch = store<(store (s80) into %ir.28, align 16)> 0x66fb658, 0x66fbe78, 0x66fbda8, undef:i64\n  0x66fbe78: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x69764a8, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x66fb728: i64 = ConstantPool<float 0.000000e+00> 0\n    0x671f578: i64 = undef\n  0x66fbda8: i64 = add nuw 0x671f3d8, Constant:i64<16>\n    0x671f3d8: i64,ch,glue = NVPTXISD::ProxyReg 0x671f4a8, 0x671fb90, 0x671f4a8:1\n      0x671fb90: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x671fb28, Constant:i32<1>, Constant:i32<0>, 0x671fb28:1\n        0x66fb4b8: i32 = Constant<1>\n        0x65f7b00: i32 = Constant<0>\n        0x671fb28: ch,glue = NVPTXISD::CallArgEnd 0x671fa58, Constant:i32<1>, 0x671fa58:1\n          0x66fb4b8: i32 = Constant<1>\n          0x671fa58: ch,glue = NVPTXISD::LastCallArg 0x671f920, Constant:i32<1>, Constant:i32<0>, 0x671f920:1\n            0x66fb4b8: i32 = Constant<1>\n            0x65f7b00: i32 = Constant<0>\n            0x671f920: ch,glue = NVPTXISD::CallArgBegin 0x671f5e0, 0x671f5e0:1\n              0x671f5e0: ch,glue = NVPTXISD::CallVoid 0x671f308, 0x66fb5f0, 0x671f308:1\n                0x66fb5f0: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x66fbd40: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x671f308: ch,glue = NVPTXISD::PrintConvergentCallUni 0x66fbb38, Constant:i32<1>, 0x66fbb38:1\n                  0x66fb4b8: i32 = Constant<1>\n                  0x66fbb38: ch,glue = NVPTXISD::DeclareRet 0x671f098, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x671f098:1\n\n\n\n\n      0x671f4a8: ch,glue = callseq_end 0x671fb90:1, TargetConstant:i64<4>, TargetConstant:i64<5>, 0x671fb90:2\n        0x671f2a0: i64 = TargetConstant<4>\n        0x65f7d08: i64 = TargetConstant<5>\n        0x671fb90: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x671fb28, Constant:i32<1>, Constant:i32<0>, 0x671fb28:1\n          0x66fb4b8: i32 = Constant<1>\n          0x65f7b00: i32 = Constant<0>\n          0x671fb28: ch,glue = NVPTXISD::CallArgEnd 0x671fa58, Constant:i32<1>, 0x671fa58:1\n            0x66fb4b8: i32 = Constant<1>\n            0x671fa58: ch,glue = NVPTXISD::LastCallArg 0x671f920, Constant:i32<1>, Constant:i32<0>, 0x671f920:1\n              0x66fb4b8: i32 = Constant<1>\n              0x65f7b00: i32 = Constant<0>\n              0x671f920: ch,glue = NVPTXISD::CallArgBegin 0x671f5e0, 0x671f5e0:1\n                0x671f5e0: ch,glue = NVPTXISD::CallVoid 0x671f308, 0x66fb5f0, 0x671f308:1\n                  0x66fb5f0: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x671f308: ch,glue = NVPTXISD::PrintConvergentCallUni 0x66fbb38, Constant:i32<1>, 0x66fbb38:1\n\n\n    0x66fc080: i64 = Constant<16>\n  0x671f578: i64 = undef\nIn function: __omp_outlined__\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/install/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": false,
                    "output": "",
                    "result": 70,
                    "runtime": 0.1658264920001784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_add_general_type_check_pt3-1d1df2.o: in function `.omp_outlined.':\nparallel_loop_reduction_add_general_type_check_pt3.c:(.text+0x90a): undefined reference to `__atomic_load'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: parallel_loop_reduction_add_general_type_check_pt3.c:(.text+0x98e): undefined reference to `__atomic_compare_exchange'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4166766089997509
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x671fbf8: ch = store<(store (s80) into %ir.28, align 16)> 0x66fb658, 0x66fbe78, 0x66fbda8, undef:i64\n  0x66fbe78: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x69764a8, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x66fb728: i64 = ConstantPool<float 0.000000e+00> 0\n    0x671f578: i64 = undef\n  0x66fbda8: i64 = add nuw 0x671f3d8, Constant:i64<16>\n    0x671f3d8: i64,ch,glue = NVPTXISD::ProxyReg 0x671f4a8, 0x671fb90, 0x671f4a8:1\n      0x671fb90: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x671fb28, Constant:i32<1>, Constant:i32<0>, 0x671fb28:1\n        0x66fb4b8: i32 = Constant<1>\n        0x65f7b00: i32 = Constant<0>\n        0x671fb28: ch,glue = NVPTXISD::CallArgEnd 0x671fa58, Constant:i32<1>, 0x671fa58:1\n          0x66fb4b8: i32 = Constant<1>\n          0x671fa58: ch,glue = NVPTXISD::LastCallArg 0x671f920, Constant:i32<1>, Constant:i32<0>, 0x671f920:1\n            0x66fb4b8: i32 = Constant<1>\n            0x65f7b00: i32 = Constant<0>\n            0x671f920: ch,glue = NVPTXISD::CallArgBegin 0x671f5e0, 0x671f5e0:1\n              0x671f5e0: ch,glue = NVPTXISD::CallVoid 0x671f308, 0x66fb5f0, 0x671f308:1\n                0x66fb5f0: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x66fbd40: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x671f308: ch,glue = NVPTXISD::PrintConvergentCallUni 0x66fbb38, Constant:i32<1>, 0x66fbb38:1\n                  0x66fb4b8: i32 = Constant<1>\n                  0x66fbb38: ch,glue = NVPTXISD::DeclareRet 0x671f098, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x671f098:1\n\n\n\n\n      0x671f4a8: ch,glue = callseq_end 0x671fb90:1, TargetConstant:i64<4>, TargetConstant:i64<5>, 0x671fb90:2\n        0x671f2a0: i64 = TargetConstant<4>\n        0x65f7d08: i64 = TargetConstant<5>\n        0x671fb90: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x671fb28, Constant:i32<1>, Constant:i32<0>, 0x671fb28:1\n          0x66fb4b8: i32 = Constant<1>\n          0x65f7b00: i32 = Constant<0>\n          0x671fb28: ch,glue = NVPTXISD::CallArgEnd 0x671fa58, Constant:i32<1>, 0x671fa58:1\n            0x66fb4b8: i32 = Constant<1>\n            0x671fa58: ch,glue = NVPTXISD::LastCallArg 0x671f920, Constant:i32<1>, Constant:i32<0>, 0x671f920:1\n              0x66fb4b8: i32 = Constant<1>\n              0x65f7b00: i32 = Constant<0>\n              0x671f920: ch,glue = NVPTXISD::CallArgBegin 0x671f5e0, 0x671f5e0:1\n                0x671f5e0: ch,glue = NVPTXISD::CallVoid 0x671f308, 0x66fb5f0, 0x671f308:1\n                  0x66fb5f0: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x671f308: ch,glue = NVPTXISD::PrintConvergentCallUni 0x66fbb38, Constant:i32<1>, 0x66fbb38:1\n\n\n    0x66fc080: i64 = Constant<16>\n  0x671f578: i64 = undef\nIn function: __omp_outlined__\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/install/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": true,
                    "output": "",
                    "result": 70,
                    "runtime": 0.16543032300023697
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:80:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop worker reduction(+:avgs)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:63:12: note: 'avgs' defined here\n    real_t avgs[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317015899983744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:80:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop worker reduction(+:avgs)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:63:12: note: 'avgs' defined here\n    real_t avgs[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03397625400020843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5662074420001773
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660310179998305,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:69:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop vector reduction(+:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:50:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539805100010199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:69:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop vector reduction(+:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:50:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03360220600006869
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659725200000139
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159212979999211,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301584200016805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033228818999759824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_general-d0e83a.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4158655549999821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03328578499986179
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033259877000091365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033360846000050515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_loop-060321.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5662431189998642
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03339726299964241
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03322190500011857
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033481761000075494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_vector_loop-237c4e.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36669451699981437
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06615149700019174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06526522200010731
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06537054999989778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_general-007d36.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4168430999998236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03319641899997805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06531255200025043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529537899996285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_loop-8a4129.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5660892020000574
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03333497699986765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03306455299980371
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0332950119995985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_vector_loop-684007.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31580760999986524
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0657069250000859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03302390499993635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03322453000009773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_general-1bf694.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4158714760001203
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06543091000003187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06555553299995154
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03295833299989681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_loop-82ced4.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5663883859997441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06565905600018596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032780362000266905
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033075070999984746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_vector_loop-f15cdf.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31568459799973425
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03316263499982597
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:54:47: error: OpenACC reduction operator '^' argument must be of integer type\n        #pragma acc parallel loop reduction(^:b)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:40:18: note: 'b' defined here\n    unsigned int b[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03323798499968689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:54:47: error: OpenACC reduction operator '^' argument must be of integer type\n        #pragma acc parallel loop reduction(^:b)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:40:18: note: 'b' defined here\n    unsigned int b[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033030549000159226
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162516059996051
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36658635499998127,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:91:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop worker reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:68:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06552893299976859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:91:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop worker reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:68:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033619657999679475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663942759997553
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666359280000506,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:65:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop vector reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:52:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0650983699997596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:65:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop vector reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:52:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06563805599989792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659305020000829
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31588292800006457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:62:49: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(max:maximums)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:47:12: note: 'maximums' defined here\n    real_t maximums[10];\n           ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06526222500042422
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:62:49: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(max:maximums)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:47:12: note: 'maximums' defined here\n    real_t maximums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536063900011868
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41608184799997616
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31694566100031807,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:88:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop worker reduction(max:temp)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:68:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520888599970931
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:88:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop worker reduction(max:temp)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:68:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0658386810000593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6166195109999535
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41694514000027993,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:71:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop vector reduction(max:reduced)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:53:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536165100033031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:71:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop vector reduction(max:reduced)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:53:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334473499990054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36588323299974945
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36595511799987435,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:65:49: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(min:minimums)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:48:12: note: 'minimums' defined here\n    real_t minimums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06544694100011839
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:65:49: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(min:minimums)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:48:12: note: 'minimums' defined here\n    real_t minimums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06514856300009342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159674460001952
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31605098199997883,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:80:44: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop reduction(min:reduced)\n                                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:65:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06537052700014101
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:80:44: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop reduction(min:reduced)\n                                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:65:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06554061499991803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660775860003014
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366028414000084,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:68:51: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop vector reduction(min:reduced)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:54:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06572639199976038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:68:51: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop vector reduction(min:reduced)\n                                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:54:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603810300020996
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659403389997351
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163122390001263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:59:47: error: OpenACC reduction operator '*' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:46:12: note: 'multiplicitive_total' defined here\n    real_t multiplicitive_total[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06556397900021693
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:59:47: error: OpenACC reduction operator '*' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n                                              ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:46:12: note: 'multiplicitive_total' defined here\n    real_t multiplicitive_total[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06533622400002059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164053419999618
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663656040002934,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:83:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:68:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06552940399978979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:83:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:68:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03315588200030106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663013830003365
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661898149998706,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:72:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:57:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529913400026999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:72:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:57:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06511234699974011
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661084039999878
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160957350000899,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03284194599973489
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06555342899991956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_general-05e35a.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.41600216000006185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033328535000237025
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_loop-be818c.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6167486029999054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660119540000778
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06562615499979074,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_vector_loop-02a0f6.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3157780830001684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660549639999772
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06561282000029678,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_seq.c/parallel_loop_seq.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31597989900001267
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664350829999421,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c:21:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c:68:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(2, 4, 8)\n                                  ^\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c:21:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n                                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c:68:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(2, 4, 8)\n                                  ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36596913399989717
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162695889999668,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector.c/parallel_loop_vector.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657313899998371
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36599529299974165,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector_blocking.c/parallel_loop_vector_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659421930001372
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31642769400014004,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker.c/parallel_loop_worker.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165642580000167
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669872340001348,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker_blocking.c/parallel_loop_worker_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164091689998713
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36635826000019733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_present.c/parallel_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658690059996843
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161773480001102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_private.c/parallel_private.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_private.c:22:48: error: subarray is not supported in 'private' clause\n    #pragma acc parallel num_gangs(10) private(c[0:n])\n                                               ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06542789400009497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_private.c/parallel_private.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655219799999031
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653819190001741,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_reduction.c/parallel_reduction.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161128870000539
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36681094499999745,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_scalar_default_firstprivate.c/parallel_scalar_default_firstprivate.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656469930001549
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31635621099985656,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_switch.c/parallel_switch.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_switch-88b83e.o: undefined reference to symbol 'floor@@GLIBC_2.2.5'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3157686639997337
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_switch.c/parallel_switch.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2664036149999447
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06549458900008176,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait.c/parallel_wait.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c:17:42: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n]) wait(1)\n                                         ^\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c:17:42: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n]) wait(1)\n                                         ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36590263900006903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31637706999981674,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait_devnum.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait_devnum.c/parallel_wait_devnum.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c:17:52: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c:21:34: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(b[0:n]) wait(1)\n                                        ^\n2 warnings generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c:17:52: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c:21:34: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(b[0:n]) wait(1)\n                                        ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36588770200023646
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667228599997543,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_while_loop.c/parallel_while_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41618670500020016
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36642461300016294,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_bind.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03322953899987624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:109:33: error: function 'test1' has no explicit '#pragma acc routine' but calls function 'host_function_identifier_unnamed', which has '#pragma acc routine vector'\n        if ((!on_host) && (fabs(host_function_identifier_unnamed(a[x], n) + b[x]) > PRECISION)){\n                                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:1: note: '#pragma acc routine' for function 'host_function_identifier_unnamed' appears here\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:113:37: error: function 'test1' has no explicit '#pragma acc routine' but calls function 'host_function_identifier_unnamed', which has '#pragma acc routine vector'\n        else if ((on_host) && (fabs(host_function_identifier_unnamed(a[x], n) - b[x]) > PRECISION)){\n                                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:1: note: '#pragma acc routine' for function 'host_function_identifier_unnamed' appears here\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n^\n3 warnings and 12 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06538393300024836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:152:30: error: function 'test2' has no explicit '#pragma acc routine' but calls function 'host_function_string_unnamed', which has '#pragma acc routine vector'\n        if (!on_host && fabs(host_function_string_unnamed(a[x], n) + b[x]) > PRECISION){\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:1: note: '#pragma acc routine' for function 'host_function_string_unnamed' appears here\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:155:34: error: function 'test2' has no explicit '#pragma acc routine' but calls function 'host_function_string_unnamed', which has '#pragma acc routine vector'\n        else if (on_host && fabs(host_function_string_unnamed(a[x], n) - b[x]) > PRECISION){\n                                 ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:1: note: '#pragma acc routine' for function 'host_function_string_unnamed' appears here\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n^\n3 warnings and 12 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0659997409998141
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033319167000172456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033280224000009184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317571899970062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06527516899996044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:175:11: error: use of undeclared identifier 'x'\n        b[x] = 0;\n          ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:178:17: error: unexpected OpenACC directive '#pragma acc data'\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:179:5: error: expected identifier or '('\n    {\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:180:21: error: unexpected OpenACC directive '#pragma acc parallel'\n        #pragma acc parallel\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:181:9: error: expected identifier or '('\n        {\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:184:5: error: extraneous closing brace ('}')\n    }\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:186:5: error: expected identifier or '('\n    if (validate_data(a, b)){\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:190:5: error: expected identifier or '('\n    return err;\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:191:1: error: extraneous closing brace ('}')\n}\n^\n3 warnings and 19 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06570057399994766
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033239197000057175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03303738100021292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03354368600002999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03268720799997027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314347900004577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03357284100002289
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c8 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03275164800015773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c9 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033138830000098096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c10 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03369454700032293
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT10 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c11 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03291605399999753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_nohost.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_nohost.c/routine_nohost.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.616214004000085
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nroutine_nohost.c:31:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7169219259999409,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_nohost.c/routine_nohost.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5670629930000359
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06578805700019075,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06544747999987521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06559732100004112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03328163600008338
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03310617899978752
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032936672999767325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032881300000099145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03307867800003805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03357764800011864
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032923117999871465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06605373299998973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06558371499977511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06571333700003379
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06517425199990612
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT6 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03358813899967572
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03342959300016446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653712089997498
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0335794210000131
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032935440999608545
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06522794199963755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03347460700024385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033209852000254614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033202410000285454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c8 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032977800000026036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT8 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c9 /global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314511200005654
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial.c/serial.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033408472999781225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial.c/serial.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31592063800007963
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11556212999994386,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_async.c/serial_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial async(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial async(2)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:41:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial wait(1, 2) async(3)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:43:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:48:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(c[0:n]) async(1)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:49:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(f[0:n]) async(2)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:50:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(g[0:n]) async(3)\n                                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:52:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:58:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c:64:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(3)\n                    ^\n3 warnings and 9 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03324365600019519
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_async.c/serial_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26625927499981117
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06511695500012138,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copy.c/serial_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copy.c:15:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copy(a[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copy.c:17:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334717899997486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copy.c/serial_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3154370860002018
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06545185900040451,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0328641470000548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06550972700006241
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03295966500036229
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03316983900003834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n9 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03282022599978518
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03364591700028541
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03306886900008976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033302705999631144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033377696000115975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033106640000369225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03326303099993311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301246399996671
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_create.c/serial_create.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c:25:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03325210100001641
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_create.c/serial_create.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162003899999945
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656512919999841,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536028900018209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03285535099985282
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033210653999958595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03328248800016809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_present.c/serial_default_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial default(present)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c:15:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032974242999898706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_present.c/serial_default_present.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656258329998309
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06571305700026642,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial deviceptr(b)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c:22:13: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06521642999996402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659514309998485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06553840000015043,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06521045899989986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03337846600015837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329065470000387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03332328399983453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033208500999990065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520368600013171
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033175238000239915
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0333951090001392
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033181750000039756
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03300450000006094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03303317300014896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0331308159998116
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03288841299990963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03331134200016095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652518459996827
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329789620000156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c:27:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial loop async(x)\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c:31:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial loop async(x)\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c:38:17: error: unknown or unsupported OpenACC directive\n                                #pragma acc wait\n                                            ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03331775500009826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656711280001218
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06578874799970436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_auto.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c:19:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03337035200001992
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03302743299991562
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c:19:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03313750699999218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03334635700002764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_gang.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop gang\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03314802700015207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26563901800000167
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06584879099955288,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(+:total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.032947391999641695
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26567580699975224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656097440000849,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:23:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(avg)\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06595680100008394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159009320002042
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06560429399996792,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(+:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06593766600008166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26548294699978214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653984489999857,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_general.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(&&:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03313575400034097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658192849999068
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06560655800012682,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:35:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03309439699978611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657605249996777
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06579323699997985,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033008045999849855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584327899990967
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656981789998099,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(&:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06543332499995813
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26535867500024324
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06529075900016323,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:31:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:33:3: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop gang private(temp)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:29:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03339935699978014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657686699999431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06605740899976809,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:29:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(c)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&:c)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:27:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033286525000221445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658341629999086
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0654256699999678,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(|:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03290974299989102
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26580729099987366
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06583476500009056,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:37:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:42:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033034104999842384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657184260001486
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06598454400000264,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:28:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:31:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:26:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03311565600006361
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660328839997419
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06594042100005026,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(^:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033149940999919636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160198830000809
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06569571399995766,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301186300041081
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265899994999927
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06543730199973652,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329935699996895
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26568629600023996
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551130100024238,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(max:max)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033182131000103254
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26590799000041443
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06556245599995236,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529695000017455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.266002626000045
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06561764899970512,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03293498999983058
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569973200003005
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06553621700004442,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(min:min)\n                    ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06496616300000824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03370906400004969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:24:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033201798000391136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657346159999179
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06626984600006836,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:22:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06578126400017936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158870160000333
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06545848199993998,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction (*:multiplied_total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03342354100004741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158190190001733
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06596434599987333,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:24:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0654828270003236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656124780000937
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06573829399985698,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06565265400013232
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26558709100027045
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06609651300004771,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(||:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033435653999731585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653983990003326
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06613771999991513,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:35:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06553069700021297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569035400007124
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06549933899987082,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:21:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655036560001463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656416220002029
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06538107699998363,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_seq.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop seq\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03295472600029825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26565446700033135
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06559108999999808,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06529387399996267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033539908999955514
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03290118699987943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03385094900022523
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop vector\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033224640999833355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655250849998083
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06599376099984511,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06549650200031465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656776000003447
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06557684200015501,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop worker\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06569608600011634
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655203670001356
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06586962999972457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:20:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial\n                  ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:22:9: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop worker\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:27:9: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop worker\n        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03317230299990115
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26557800500040685
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0657632709999234,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_present.c/serial_present.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_present.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n], b[0:n]) copy(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_present.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06503875799990055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_present.c/serial_present.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569073500013474
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06548675499971068,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_private.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_private.c/serial_private.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_private.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial private(c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_private.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop gang\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065301178000027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_private.c/serial_private.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2653160059999209
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06564722399980383,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_reduction.c/serial_reduction.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n]) reduction(+:reduction)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c:16:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03288821199976155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_reduction.c/serial_reduction.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2662396880000415
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0655342439999913,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06580349600017144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659495979996791
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0656325659997492,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_switch.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_switch.c/serial_switch.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_switch.c:19:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_switch.c:21:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06515591800007314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_switch.c/serial_switch.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660997079997287
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0653001470000163,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_wait.c/serial_wait.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_wait.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n]) wait(1)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_wait.c:19:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06517853000013929
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_wait.c/serial_wait.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.266010771999845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0657677680001143,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_while_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c:16:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c:18:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c:14:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520480800008954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26568139700020765
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06573600899992016,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_default_async.c/set_default_async.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set default_async(1)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:23:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:30:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set default_async(2)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n3 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06549064199953136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_default_async.c/set_default_async.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656714379991172
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06523763999939547,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_num.c/set_device_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_num.c:18:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_num.c:22:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_num.c:35:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0333911010002339
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_num.c/set_device_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26546629599943117
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06582635900031164,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03301739299968176
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513750300018728
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539204700038681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03316562100008014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033489655000266794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03320656699997926
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03312136700060364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033560667000529065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c:9:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(host) device_num(device_num)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03341759999966598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03319194900086586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c:9:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(host) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033049583000320126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0329523029995471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num_nvidia.c:9:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(nvidia) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03332640900043771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655958779996581
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06580248400041455,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06537821199981408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658784539999033
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06535008000082598,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type == device_type)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653366440001264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03303827299987461
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type == device_type)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033034536000741355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03325439600030222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown.c/shutdown.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03320175699991523
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown.c/shutdown.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659215949997815
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06564948899995215,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_num.c:10:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06506934599929082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26555661400016106
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06537779199970828,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06535395700029767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653732430000673
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033287737000136985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03331502899982297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03316869700029201
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0327994570006922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06510188599986577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065970307000498
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03328581400000985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652485999999044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06565241399948718
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06534219500008476
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c4 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06527101300071081
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c5 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06547620499986806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c6 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.033458988000347745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c7 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513083000027109
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(nvidia) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03374675500072044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26610983600039617
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.065523543999916,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_nvidia.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06580694200056314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26562589400055003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551617000059196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c0 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num == device_num)\n                    ^\n/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06569012500040117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c1 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06533387999934348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c2 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num == device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03333489600026951
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/install/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c3 /global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.03319213999930071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_async_test_all.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "7": {
                            "result": "Pass",
                            "run_index": 8
                        }
                    },
                    "acc_copyin_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyout.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_copyout_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 6
                        }
                    },
                    "acc_create_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_delete.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_type.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "3": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "3": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        }
                    },
                    "acc_update_device.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitand_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitand_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitxor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_multiply_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_minus_equals.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_multiply_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_plus_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitand_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitxor_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_multiply_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_minus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_multiply_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_plus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitand_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitxor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitxor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_multiply_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_plus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_minus_equals.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_multiply_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_plus_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitand_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitxor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_minus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_multiply_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_plus_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitand_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitor_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitxor_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_divided_equals_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitand_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitor_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitxor_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_multiply_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_plus_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_lshift_equals_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_minus_equals_assign.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_multiply_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_plus_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postdecrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postincrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_predecrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_preincrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_rshift_equals_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitand_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitor_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitxor_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_divided_expr_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_lshift_expr_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_minus_expr_assign.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_multiply_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_plus_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_rshift_expr_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitand_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitxor_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_multiply_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_minus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_multiply_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_plus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitand_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitxor_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_multiply_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitand_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitxor_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_multiply_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 2
                        }
                    },
                    "data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_structs.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_device_resident.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "declare_function_scope_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_exit_data_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "exit_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_delete_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "host_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_workers.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_vector_length.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_no_collapse_default.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_copyin.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_deviceptr.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_independent_atomic.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_capture.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_read.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_update.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_write.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent_reduction.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt1.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "7": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "8": {
                            "result": "Pass",
                            "run_index": 9
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt2.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "5": {
                            "result": "Runtime Failure",
                            "run_index": 9
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt3.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_wait_devnum.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "routine_bind.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "10": {
                            "result": "Compilation Failure",
                            "run_index": 10
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        },
                        "9": {
                            "result": "Compilation Failure",
                            "run_index": 9
                        }
                    },
                    "routine_nohost.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "routine_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        }
                    },
                    "routine_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "serial.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_copyout.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_auto.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_reduction.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_while_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "set_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "login33",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.43_11.0.51-cray_shasta_c",
            "version": "#1 SMP Thu Mar 31 18:57:28 UTC 2022 (514bda1)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    while (!acc_async_test(1));\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(1));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3() {\n    int err = 0;\n    real_t* a = (real_t*)malloc(n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(n * sizeof(real_t));\n    real_t* e = (real_t*)malloc(n * sizeof(real_t));\n    int async_val = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(async_val));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test3();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t*));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x][y] = a[x][y] + b[x][y];\n            }\n        }\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                e[x][y] = c[x][y] + d[x][y];\n            }\n        }\n        #pragma acc update host(e[x:1][0:n]) async(x)\n    }\n   \n    while(!acc_async_test_all());\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], d[0:10*n]) copyout(c[0:10*n], e[0:10*n])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x * n + y] = c[x * n + y] + d[x * n + y];\n                }\n            }\n        }\n        while(!acc_async_test_all());\n    }\n\n    for (int x = 0; x < 10*n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    \n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t *));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n    {\n        for (int x = 0; x < 10; ++x){\n            acc_set_default_async(x);\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x][y] = a[x][y] + b[x][y];\n                }\n            }\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x][y] = c[x][y] + d[x][y];\n                }\n            }\n        }\n        while (!acc_async_test_all());\n    }\n\n    int count = 0;\n    int total = 0;\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < n; ++y) {\n            if (fabs(e[x][y]) < PRECISION) {\n                count += 1;\n            }\n            total += 1;\n        }\n    }\n    printf(\"%d out of %d\\n\", count, total);\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    \n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(a, n * sizeof(real_t));\n    acc_copyout(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        acc_copyout(a, n * sizeof(real_t));\n        acc_copyout(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] - b_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_pcopyin(a, n * sizeof(real_t));\n    acc_pcopyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_copyin(a, n * sizeof(real_t));\n    acc_present_or_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test6() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test6();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\nint test7() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n            c[x] = 0;\n        }\n        \n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel present(a[0:n], b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test7();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,data,executable-data,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(2) wait(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION * 4){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "data",
                            "executable-data",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    acc_copyin_async(b, n*sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err = err + 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyin_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n        }\n\n        acc_copyin_async(a, n * sizeof(real_t), 1);\n        acc_copyin_async(b, n * sizeof(real_t), 2);\n\n        for (int x = 0; x < n; ++x) {\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc wait\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc parallel async(1) present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2) present(f[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        acc_copyout_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    \n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc enter data copyin(c[0:n])\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize(c, n * sizeof(real_t));\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) present(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        acc_copyout_finalize_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,internal-control-values,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,internal-control-values,set,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_pcreate(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0;\n        }\n        acc_create(c, n * sizeof(real_t));\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(c[0:n])\n        #pragma acc exit data copyout(c[0:n])\n    \n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        acc_create_async(c, n * sizeof(real_t), 1);\n        acc_create_async(f, n * sizeof(real_t), 2);\n        #pragma acc data present(c[0:n], f[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    f[x] = d[x] + e[x];\n                }\n            }\n            #pragma acc wait\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n], f[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_create_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    \n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data create(c[0:n])\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n            acc_create_async(c, n * sizeof(real_t), 1);\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) async(1)\n            #pragma acc wait\n        }\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        acc_delete_async(b, n * sizeof(real_t), 1);\n        acc_delete_async(d, n * sizeof(real_t), 2);\n        acc_delete_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,construct-independent,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,syntactic,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,syntactic,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(b, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(d, n * sizeof(real_t), 2);\n        acc_delete_finalize_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n    real_t *b_ptr;\n    real_t *c_ptr;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n\n    a_ptr = acc_deviceptr(a);\n    b_ptr = acc_deviceptr(b);\n    c_ptr = acc_deviceptr(c);\n\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c_ptr[x] = a_ptr[x] + b_ptr[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int *a = (int *)acc_malloc(n * sizeof(int));\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n\n    acc_free(a);\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory < initial_memory + n * sizeof(int)){\n        err += 1;\n    }\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int holder = acc_get_default_async();\n\n    for(int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(holder)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    if (acc_get_default_async() < 0){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            if (acc_get_device_num(acc_get_device_type()) != x){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:1.0-3.2\nint test1(){\n\tint err = 0;\n\n\tint device_type = acc_get_device_type();\n\n\tif (acc_get_device_type() != device_type){\n\t\terr += 1;\n\t}\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if(acc_get_device_type() != acc_device_none && acc_get_num_devices(acc_get_device_type()) == 0){ //Can't have zero of current device type\n          err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        const char* returned_string1;\n        const char* returned_string2;\n        const char* returned_string3;\n        int returned_int;\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n        returned_string2 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_vendor);\n        returned_string3 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_driver);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n\n    a_ptr = acc_create(a, n * sizeof(real_t));\n\n    if (a != acc_hostptr(acc_deviceptr(a))){\n        err += 1;\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,init,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_init(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "init",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,devonly,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n])\n    if (acc_is_present(a, n * sizeof(real_t)) == 0){\n        err += 1;\n    }\n    #pragma acc exit data delete(a[0:n])\n\n    if (devtest[0] == 1){\n        if (acc_is_present(a, n * sizeof(real_t)) != 0){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:1.0-2.7\nint test1(){\n    int err = 0;\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    int *a = (int *)acc_malloc(n * sizeof(int));\n\n    if (initial_memory == 0){\n        return err;\n    }\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory + n * sizeof(int) > initial_memory){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    acc_memcpy_device(a, devdata, n * sizeof(real_t));\n    acc_memcpy_device(b, devdata+n, n * sizeof(real_t));\n    acc_memcpy_device(c, devdata+2*n, n * sizeof(real_t));\n\n    #pragma acc data present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n\n    acc_memcpy_from_device(a, devdata, n * sizeof(real_t));\n    acc_memcpy_from_device(b, &(devdata[n]), n * sizeof(real_t));\n    acc_memcpy_from_device(c, &(devdata[2*n]), n * sizeof(real_t));\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *hostdata_copy = (real_t *)malloc(6 * n * sizeof(real_t));\n\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n        hostdata[3*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[4*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[5*n + x] = 2;\n    }\n\n    for (int x = 0; x < 6*n; ++x){\n        hostdata_copy[x] = hostdata[x];\n    }\n\n    devdata = acc_copyin(hostdata, 6 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        acc_memcpy_from_device_async(a, devdata, n * sizeof(real_t), 1);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(b, &(devdata[n]), n * sizeof(real_t), 2);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(d, &(devdata[3*n]), n * sizeof(real_t), 4);\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(e, &(devdata[4*n]), n * sizeof(real_t), 5);\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(c, &(devdata[2*n]), n * sizeof(real_t), 3);\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(f, &(devdata[5*n]), n * sizeof(real_t), 6);\n    }\n\n    #pragma acc wait(1)\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata_copy[x] * hostdata_copy[x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(2)\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - hostdata_copy[n + x] * hostdata_copy[n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(4)\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - hostdata_copy[3*n + x] * hostdata_copy[3*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(5)\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - hostdata_copy[4*n + x] * hostdata_copy[4*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(f[x] - (2 + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    devdata = acc_create(hostdata, 3 * n * sizeof(real_t));\n\n    acc_memcpy_to_device(devdata, a, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[n]), b, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[2*n]), c, n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(hostdata[0:3*n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2 * n + x] - (1 + hostdata[n + x] + hostdata[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e_host = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 2;\n\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        d_host[x] = d[x];\n        e_host[x] = e[x];\n    }\n\n    devdata = acc_create(hostdata, 6 * n * sizeof(real_t));\n\n    acc_memcpy_to_device_async(devdata, a, n * sizeof(real_t), 1);\n    acc_memcpy_to_device_async(&(devdata[n]), b, n * sizeof(real_t), 2);\n    acc_memcpy_to_device_async(&(devdata[2*n]), c, n * sizeof(real_t), 3);\n    acc_memcpy_to_device_async(&(devdata[3*n]), d, n * sizeof(real_t), 4);\n    acc_memcpy_to_device_async(&(devdata[4*n]), e, n * sizeof(real_t), 5);\n    acc_memcpy_to_device_async(&(devdata[5*n]), f, n * sizeof(real_t), 6);\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n    }\n\n    #pragma acc update host(hostdata[2*n:n]) async(3)\n    #pragma acc update host(hostdata[5*n:n]) async(6)\n\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2*n + x] - (1 + a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4 * PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[5*n + x] - (2 + d_host[x] * d_host[x] + e_host[x] * e_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int device_type = acc_get_device_type();\n\n    if (device_type != acc_device_none){\n        #pragma acc data copy(err)\n        {\n            #pragma acc parallel\n            {\n                if (acc_on_device(device_type) == 0){\n                    err += 1;\n                }\n            }\n        }\n    }\n    else{\n        #pragma acc parallel\n        {\n            if (acc_on_device(acc_device_host) == 0){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,set,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        acc_set_default_async(1);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_set_default_async(2);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,construct-independent,set,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,internal-control-values,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    acc_set_device_type(device_type);\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,shutdown,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_shutdown(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "shutdown"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device(a, n * sizeof(real_t));\n        acc_update_device(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device(a, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device(b, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_device_async(b, n * sizeof(real_t), 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,devonly,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data create(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_update_self(c, n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_self(a, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        acc_update_self(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n\n\n    #pragma acc data create(c[0:n], d[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] * b[x];\n            }\n        }\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        acc_update_self_async(d, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(d[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n\tint err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_self_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] + 1;\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] + 1;\n                }\n            }\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - ((a[x] + 1) * (b[x] + 1))) > 4 * PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    acc_wait(1);\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n], c[0:n], d[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        c_host[x] = c[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = c[x] * c[x];\n            }\n        }\n        acc_wait_all();\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x] + c_host[x] * c_host[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n    real_t *j = (real_t *)malloc(n * sizeof(real_t));\n    real_t *k = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = rand() / (real_t)(RAND_MAX / 10);\n        i[x] = 0;\n        j[x] = 0;\n        k[x] = 0;\n        a_host[x] = a[x];\n        d_host[x] = d[x];\n        g_host[x] = g[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n], h[0:n]) create(c[0:n], f[0:n], i[0:n], j[0:n]) copyout(k[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = g[x] + h[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                j[x] = c[x] + f[x] + i[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x] * c[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            for (int x = 0; x < n; ++x){\n                d[x] = e[x] * f[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            for (int x = 0; x < n; ++x){\n                g[x] = h[x] * i[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                k[x] = j[x] + a[x] + d[x] + g[x];\n            }\n        }\n        #pragma acc wait(4)\n    }\n\n    real_t temp;\n    for (int x = 0; x < n; ++x){\n        temp = a_host[x] + b[x] + d_host[x] + e[x] + g_host[x] + h[x];\n        temp += b[x] * (a_host[x] + b[x]) + e[x] * (d_host[x] + e[x]) + h[x] * (g_host[x] + h[x]);\n        if (fabs(k[x] - temp) > PRECISION * 10){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = 0;\n        i[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n]) create(c[0:n], f[0:n], h[0:n]) copyout(i[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                h[x] = c[x] + g[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = h[x] + f[x];\n            }\n        }\n        #pragma acc wait(2)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(i[x] - (a[x] + b[x] + g[x] + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            b[x] += 1<<y;\n        }\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (iterator = x, iterator2 = 0; iterator < n; iterator += n/10 + 1, iterator2++){\n            temp_a[iterator2] = a[iterator];\n            temp_b[iterator2] = b[iterator];\n        }\n        if (!is_possible(temp_a, temp_b, iterator2, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_indexer = 0;\n    int absolute_indexer = 0;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, temp_indexer = 0; absolute_indexer < n; absolute_indexer += n/10 + 1, temp_indexer++){\n            temp_a[temp_indexer] = a[absolute_indexer];\n            temp_b[temp_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_indexer, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int * temp_a = (int *)malloc(10 * sizeof(int));\n    int * temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (temp_iterator = 0, ab_iterator = x; ab_iterator < n; temp_iterator++, ab_iterator += n/10 + 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_iterator, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n;  ab_iterator+=((n/10) + 1)){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_total = 0;\n    int absolute_indexer;\n    int passed_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                     b[x] = totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        passed_total += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, passed_indexer = 0; absolute_indexer < n; absolute_indexer += (n/10 + 1), passed_indexer++){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, passed_total)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(passed_a, passed_b, passed_indexer - 1, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!(is_possible(&(a[x*3]), &(c[x*3]), 3, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, 0)){\n            err += 1;\n        }\n        break;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int)(n/10 + 1))];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%((int)(n/10 + 1))] += (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(&(a[3*x]), &(c[3*x]), 3, 0)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = (distribution[(int) (a[x]*b[x]/10)])--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = distribution[(int) (a[x]*b[x]/10)]++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = --distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = ++distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_copy[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = b[x];\n                    b[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            err++;\n        }\n        if (abs(b[x] - a[x]) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] &= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] |= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] ^= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] /= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] & totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] | totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] ^ totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t* passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t* passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = (a[x] + b[x]) / totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        for (int y = 0; y < 10 && (x + y) < n; ++y){\n            passed_a[y] = a[x + y];\n            passed_b[y] = b[x + y];\n        }\n        if (!(is_possible_2(passed_a, passed_b, 10, 1, totals[x/10]))){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] <<= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%10];\n                    totals[x%10] -= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    --distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] >>= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] & a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] | a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] ^ a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] << 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%10];\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] >> 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitand_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] &= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] |= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitxor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] ^= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_divided_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n          #pragma acc loop\n          for (int x = 0; x < n; ++x){\n              #pragma acc atomic capture\n              {\n                  totals[x/10] /= (a[x] + b[x]);\n                  c[x] = totals[x/10];\n              }\n          }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitand_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] & totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] | totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitxor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] ^ totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_multiply_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_plus_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_lshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] <<= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_minus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%10] -= (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_multiply_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_plus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postdecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y - 1 == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_predecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    --distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_preincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_rshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] >>= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitand_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] & a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] | a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitxor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] ^ a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_divided_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                    c[x] = totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_lshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] = a[x] << 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_minus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_multiply_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_plus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_rshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] = a[x] >> 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > 10 * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "copy_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copy(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copy(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copy_copyout.cpp": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copy(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copy(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    data_container<real_t> a = *(new data_container<real_t>(n));\n\n    for(int x = 0; x < n; ++x){\n\ta.data[x] = 1.0;\n    }\n\n    #pragma acc parallel loop copy(a, a.data[0:n]) copyout(a, a.data[0:n])\n    for(int x = 0; x < n; ++x){\n\ta.data[x] += 1.0;\n    }\n\n    for(int x = 0; x < n; ++x){\n\tif(fabs(a.data[x] - 2.0) > PRECISION){\n\t    err ++;\n\t}\n    }\n\t\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copyin_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copyin(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copyin(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copyin_copyout.cpp": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copyin(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copyin(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    data_container<real_t> a = *(new data_container<real_t>(n));\n\n    for(int x = 0; x < n; ++x){\n\ta.data[x] = 1.0;\n    }\n\n    #pragma acc parallel loop copyin(a, a.data[0:n]) copyout(a.data[0:n])\n    for(int x = 0; x < n; ++x){\n\ta.data[x] += 1.0;\n    }\n\n    if(a.data != NULL){\n\tfor(int x = 0; x < n; ++x){\n\t    if(fabs(a.data[x] - 2.0) > PRECISION){\n\t\terr = 0;\n\t    }\n\t}\n    }\n    else{\n\terr = n;\n    }\n\t\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc wait(1)\n    \n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc wait(0)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_copy_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[:n], b[:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,reference-counting,devonly,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    if (devtest[0] == 1) {\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int x = 0; x < n; ++x){\n                        c[x] += a[x] + b[x];\n                    }\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION){\n                    err += 1;\n                    break;\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(c[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(zero: b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data present_or_create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data pcreate(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) create(zero: b[0:n]) copyout(b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_present_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) wait(0)\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] += c[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1 \n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_with_changing_subscript.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int length = n;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:length], b[0:length]) copyout(c[0:length])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < length; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        length = 1;\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_structs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    multi_item * a = (multi_item *)malloc(n * sizeof(multi_item));\n\n    for (int x = 0; x < n; ++x){\n        a[x].a = rand() / (real_t)(RAND_MAX / 10);\n        a[x].b = rand() / (real_t)(RAND_MAX / 10);\n        a[x].c = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x].c = a[x].a + a[x].b;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x].c - (a[x].a + a[x].b)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + fixed_size_array[x%10])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(scalar)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_copyin(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,attach,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    datapointer = a;\n    #pragma acc enter data copyin(a[0:n]) attach(datapointer)\n    #pragma acc data present(datapointer[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "attach"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    scalar = 10;\n    #pragma acc update device(scalar)\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc update device(mult_create)\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_create(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    datapointer = a;\n\n    #pragma acc data copyin(a[0:n]) attach(datapointer)\n    {\n        #pragma acc parallel present(datapointer[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_device_resident.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_device_resident(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyin_copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyin_copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[1] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (4 + a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n\n    #pragma acc data copy(c[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            function_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            b_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 0;\n            }\n        }\n\n        #pragma acc data copy(a[0:n][0:n], b[0:n][0:n], c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (a_host[x][y] + b_host[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 1;\n            }\n        }\n\n        #pragma acc data copy(c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] - a_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] - b_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_test(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x][y] - (a[x][y] * (a[x][y] + b[x][y]))) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_as_present(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    create_as_present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_deviceptr.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            devpointer_c[x] = acc_deviceptr(c[x]);\n            declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,runtime,construct-independent,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyout(d[x:1][0:n])\n                {\n                    devpointer_c[x] = acc_copyin(c[x], n * sizeof(real_t));\n                    declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 10){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,present,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                present(a[x], b[x], c[x], d[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,present,devonly,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[:n], b[:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data present_or_create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data pcreate(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_exit_data_if.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,if,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n    #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(dev)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,if,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(host)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,devonly,if,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n        #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(dev)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(host)\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n        }\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n        }\n\n        #pragma acc enter data copyin(a[0:n])\n        #pragma acc parallel present(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] + 1;\n            }\n        }\n        #pragma acc exit data delete(a[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel present(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = a[x] + 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (a_copy[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc data copyin(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc parallel\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(c[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[:n], b[:n]) copyout(c[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,host-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    int * high = (int *)malloc(n * sizeof(int));\n    int high_current_index = 0;\n    size_t * a_points = (size_t *)malloc(n * sizeof(void *));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        if (a[x] > 5) {\n            high[high_current_index] = x;\n            high_current_index += 1;\n        }\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n\n    #pragma acc host_data use_device(a)\n    {\n        int x = 0;\n        for (x = 0; x < high_current_index; ++x){\n            a_points[x] = (size_t) a + (high[x]*sizeof(real_t*));\n        }\n        for (; x < n; ++x){\n            a_points[x] = 0;\n        }\n    }\n    #pragma acc enter data copyin(a_points[0:n])\n    #pragma acc parallel present(a[0:n], a_points[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            if (a_points[x] != 0){\n                *((real_t *) a_points[x]) -= 5;\n            }\n        }\n    }\n    #pragma acc exit data delete(a_points[0:n]) copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (a[x] < 0 || a[x] > 5) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "host-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(host) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(multicore) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(default) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\t\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num == device_num)\n\t//#pragma acc init if(true)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num != device_num)\n\t//#pragma acc init if(false)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test2();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 1);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "kernel_implicit_data_attributes.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/ (real_t)(RAND_MAX / 10);\n\n\t#pragma acc kernels\n\tfor ( int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor(int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *test_array = (real_t *)malloc(n *sizeof(real_t));\n\treal_t *host_array = (real_t *)malloc(n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n\t\ttest_array[x] = rand()/(real_t)(RAND_MAX/ 10);\n\t\thost_array[x] = test_array[x];\n\t}\n\n\t#pragma acc kernels\n\tfor(int x = 0; x < n; ++x){\n\t\ttest_array[x] += test_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - test_array[x]) > PRECISION){\n\t\t\terr = 1;\n                }\n        }\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for(int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed != 0){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "kernels_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tb[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tc[x] = 0.0;\n      \td[x] = rand() / (real_t)(RAND_MAX / 10);\n      \te[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tf[x] = 0.0;\n      \tg[x] = 0.0;\n    }\n    #pragma acc enter data create(g[0:n], c[0:n], f[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc kernels async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc kernels async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc kernels wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n    }\n    #pragma acc wait(1, 2)\n    #pragma acc update host(c[0:n], f[0:n])\n    #pragma acc exit data copyout(g[0:n]) async(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n      \t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc exit data delete(c[0:n], f[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels copy(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 1;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - 1) > PRECISION && (a[x] + b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++ x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                c[x] = 0;\n            }\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION) {\n                    err += 1;\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc kernels copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0.0;\n        }\n\n        #pragma acc data copy(a[0:n], b[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = -1;\n            }\n            #pragma acc kernels copyin(a[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x] - a[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n    \n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels copyout(zero: b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,devonly,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = 0.0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels create(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data-region,default-mapping,reference-counting,devonly,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]), create(b[0:n])\n    #pragma acc kernels default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n]), copyout(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,if,V:1.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,if,V:2.0-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    data_on_device = 1;\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,if,devonly,V:2.0-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n\tdevtest[0] = 0;\n\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n        for (int x = 0; x < n; ++x){\n            a[x] = -1;\n        }\n\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] + 1) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] + 1) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        data_on_device = 0;\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:kernels,if,devonly,V:2.0-3.2\nint test4(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n])\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION && b[x] != a[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(1024 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(1024 * sizeof(real_t));\n\n    for (int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc kernels loop copy(a[0:1024]) copyout(b[0:1024])\n    for (int _0 = 0; _0 < 2; ++_0){\n        #pragma acc loop\n        for (int _1 = 0; _1 < 2; ++_1){\n            #pragma acc loop\n            for (int _2 = 0; _2 < 2; ++_2){\n                #pragma acc loop\n                for (int _3 = 0; _3 < 2; ++_3){\n                    #pragma acc loop\n                    for (int _4 = 0; _4 < 2; ++_4){\n                        #pragma acc loop\n                        for (int _5 = 0; _5 < 2; ++_5){\n                            #pragma acc loop\n                            for (int _6 = 0; _6 < 2; ++_6){\n                                #pragma acc loop\n                                for (int _7 = 0; _7 < 2; ++_7){\n                                    #pragma acc loop\n                                    for (int _8 = 0; _8 < 2; ++_8){\n                                        #pragma acc loop\n                                        for (int _9 = 0; _9 < 2; ++_9){\n                                            b[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9] = a[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    real_t total = 10; //Should be innitialized to 0 anyway.\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc kernels loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    char found = 0;\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    char temp = 1;\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    char temp = 1;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    unsigned int b = 0;\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n    unsigned int host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b = a[0];\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n    unsigned int host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc kernels loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc kernels loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc kernels loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n]) copy(b[0:n])\n  {\n      #pragma acc kernels loop seq\n      for (int x = 1; x < n; ++x){\n          b[x] = b[x-1] + a[x];\n      }\n  }\n\n  for (int x = 1; x < n; ++x){\n      temp += a[x];\n      if (fabs(b[x] - temp) > PRECISION){\n          err = 1;\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n  #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n  {\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              temp = 0;\n              for (int z = 0; z < n; ++z){\n                  temp += a[x] + b[y] + c[z];\n              }\n              d2[x * n + y] = temp;\n          }\n      }\n  }\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          temp = 0.0;\n          for (int z = 0; z < n; ++z){\n              temp += a[x] + b[y] + c[z];\n          }\n          if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n              err += 1;\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n  {\n      #pragma acc kernels loop tile(n/10, n, n*2)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              for (int z = 0; z < n; ++z){\n                  d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n              }\n          }\n      }\n  }\n\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          for (int z = 0; z < n; ++z){\n              if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                  err = 1;\n              }\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_gangs(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_workers(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,structured-data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    #pragma acc kernels present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "structured-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default-mapping,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t sum = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum + a[x];\n    }\n\n    #pragma acc data copyin(b[0:n])\n    {\n        #pragma acc kernels num_gangs(1) vector_length(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                sum = sum + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum - (a[x] + b[x]);\n    }\n\n    if (fabs(sum) > (2 * n - 2) * PRECISION){\n        err += 1;\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + a[x];\n        }\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + b[x];\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels vector_length(16)\n        {\n            #pragma acc loop vector\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n]) async(1)\n    #pragma acc kernels wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(1)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    real_t total;\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n + y];\n            if (fabs(c[x * n + y] - total) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:loop,syntactic,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(2)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse_default.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n +y];\n            if (fabs(total - c[x * n + y]) > PRECISION * y){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc parallel copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if(failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t device = rand() / (real_t)(RAND_MAX / 10);\n    real_t host = device;\n    #pragma acc parallel loop copy(device) reduction(+:device)\n    for(int x = 0; x < n; ++x){\n        device += 1.0;\n    }\n\n    if(fabs(device - host) > PRECISION){\n            err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode +=  (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc parallel copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc parallel copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = a[x];\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] - a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n          if (fabs(a[x] - b[x]) > PRECISION){\n            err += 2;\n            break;\n          }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] - a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x]) > 2 * PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout_zero.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    //for development; logic test\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n      for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n      }\n\n      #pragma acc data copyin(a[0:n])\n      {\n        #pragma acc parallel copyout(zero: b[0:n])\n        {\n          #pragma acc loop\n          {\n            for (int x = 0; x < n; ++x){\n              b[x] += a[x];\n            }\n          }\n        }\n      }\n\n      for (int x = 0; x < n; ++x){\n          if(fabs(a[x] - b[x]) > PRECISION){\n                  err += 1;\n                  break;\n          }\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:3.0-3.1\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x] + 1) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//#T1:parallel,data,data_region,V:3.0-3.2\nint Test1(){\n    int err=0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for( int x = 0; x < n; x++){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]\n    {\n        #pragma acc parallel create(zero: b[0:n])\n        {\n            #pragma acc loop\n            {\n                for(int x = 0; x < n; x++){\n                    b[x] += a[x];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,default,data,data-region,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "default",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,runtime,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc parallel deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "runtime"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,firstprivate,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - (a[x * n + y] + b[x * n + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,firstprivate,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    c[y] = a[x * n + y] - b[x * n + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,if,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc parallel if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,if,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n    int accel = 1;\n    int host = 0;\n\n    dev_test[0] = 1;\n    #pragma acc data copyin(dev_test[0:1])\n    #pragma acc parallel\n    {\n      dev_test[0] = 0;\n    }\n\n    if (devtest[0] != 0){\n        for (int x = 0; x < n;  ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,if,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy clause test wih parallel default(none) and reduction with scalar variable\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int test = rand()/(real_t)(RAND_MAX/10);\n    int host = test;\n\n    #pragma acc parallel default(none) reduction(+:test)\n    for(int x = 0; x < n; ++x){\n\ttest += 1;\n    }\n\n    if(fabs( test - host) >  PRECISION){\n\terr++;\n    }\n    \n    return err;\n} \n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with parallel loop and reduction with scalar variable\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\treal_t a = rand()/(real_t)(RAND_MAX/10);\n\treal_t host = a;\n\n\t#pragma acc parallel loop reduction(+:a)\n\tfor( int x = 0; x < n; ++x){\n\t\ta += 1.0;\n\t}\n\n\tif( fabs( a - host) > PRECISION){\n\t\terr++;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only parallel and reduction with scalar variable\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host_value = rand()/ (real_t)(RAND_MAX/10);\n\tint device_value = host_value;\n\n\t#pragma acc parallel reduction(+:device_value) \n\tfor( int x = 0; x > n; ++ x){\n\t\tdevice_value += device_value;\n\t}\n\tif( fabs(host_value - device_value) > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\t\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += ( 1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\n//copy clause wtth that calles detach action only parallel loop  with aggregate variables\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *)malloc( n * sizeof(real_t));\n\treal_t *device_array = (real_t *)malloc( n * sizeof(real_t));\n\n\tfor(int x = 0; x < n; ++ x){\n\t\thost_array[x] = rand()/(real_t)(RAND_MAX/10);\n\t\tdevice_array[x] = host_array[x];\n\t}\n\n\t#pragma acc parallel loop\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n\t\tif(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n\t\t\terr = 1;\n\t\t}\n\t}\n\tfree(host_array);\n\tfree(device_array);\n\treturn err;\n\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += ( 1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_independent_atomic.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic \n                    a[x] = a[x] * 2; //dependent\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:2.7-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    (a[x])++; //independent - without a clause, you're doing atomic update   \n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_capture.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_read.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic read\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_update.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_write.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic write\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,async,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc parallel loop async(x) reduction(+:errors[x])\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n      #pragma acc parallel loop auto\n      for (int x = 0; x < n; ++x){\n        b[x] = a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(b[x] - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,combined-constructs,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n      #pragma acc parallel loop auto\n      for (int x = 1; x < n; ++x){\n        a[x] = a[x - 1] + a[x];\n      }\n    }\n\n    real_t rolling_total = 0.0;\n    for (int x = 0; x < n; ++x){\n      rolling_total += a_copy[x];\n      if (fabs(rolling_total - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop independent\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    total = 10;\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(total)\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t c[10];\n    real_t c_host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        c[x] = 1.0;\n        c_host[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(+:c[0:10])\n        for (int x = 0; x < n; ++x) {\n            for (int y = 0; y < 10; ++y) {\n                c[y] += a[x * 10 + y] + b[x * 10 + y];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        for (int y = 0; y < 10; ++y) {\n            c_host[y] += a[x * 10 + y] + b[x * 10 + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c_host[x] - c[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt1.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n    _Bool* a = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool* b = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool total = 1;\n    _Bool host_total = 1;\n\n    for (int x = 0; x < n; ++x) {\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            b[x] = 1;\n        }\n        else {\n            b[x] = 0;\n        }\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n    \n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    char * b = (char *)malloc(n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(UCHAR_MAX / 10);\n        b[x] = rand() / (real_t)(UCHAR_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    signed char * a = (signed char *)malloc(n * sizeof(signed char));\n    signed char * b = (signed char *)malloc(n * sizeof(signed char));\n    signed char total = 10;\n    signed char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned char * a = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char * b = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char total = 10;\n    unsigned char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    short int * a = (short int *)malloc(n * sizeof(short int));\n    short int * b = (short int *)malloc(n * sizeof(short int));\n    short int total = 10;\n    short int host_total = 10;    \n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    int * b = (int *)malloc(n * sizeof(int));\n    int total = 10;\n    int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,nonvalidating,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long int * a = (long int *)malloc(n * sizeof(long int));\n    long int * b = (long int *)malloc(n * sizeof(long int));\n    long int total = 10;\n    long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    long long int * a = (long long int *)malloc(n * sizeof(long long int));\n    long long int * b = (long long int *)malloc(n * sizeof(long long int));\n    long long int total = 10;\n    long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt2.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned short int * a = (unsigned short int*)malloc(n * sizeof(unsigned short int));\n    unsigned short int * b = (unsigned short int *)malloc(n * sizeof(unsigned short int));\n    unsigned short int total = 10;\n    unsigned short int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int total = 10;\n    unsigned int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    unsigned long int * a = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int * b = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int total = 10;\n    unsigned long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned long long int * a = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int * b = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int total = 10;\n    unsigned long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n    \n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    float * a = (float *)malloc(n * sizeof(float));\n    float * b = (float *)malloc(n * sizeof(float));\n    float total = 10;\n    float host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(total - host_total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    double * a = (double *)malloc(n * sizeof(double));\n    double * b = (double *)malloc(n * sizeof(double));\n    double total = 10;\n    double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long double * a = (long double *)malloc(n * sizeof(long double));\n    long double * b = (long double *)malloc(n * sizeof(long double));\n    long double total = 10;\n    long double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    float _Complex * a = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex * b = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex total = 10 + 10 * I;\n    float _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(crealf(total) - crealf(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsf(cimagf(total) - cimagf(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt3.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    double _Complex * a = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex * b = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex total = 10 + 10 * I;\n    double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(creal(total) - creal(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabs(cimag(total) - cimag(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    long double _Complex * a = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex * b = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex total = 10 + 10 * I;\n    long double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(creall(total) - creall(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsl(cimagl(total) - cimagl(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(avg)\n        for (int x = 0; x < 10; ++x) {\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y) {\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x) {\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y) {\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y) {\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2() {\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t avgs[5];\n    real_t host_avgs[5];\n\n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25*n], d[0:25*n])\n    {\n        #pragma acc parallel loop gang private(avgs)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = 0;\n            }\n            #pragma acc loop worker reduction(+:avgs)\n            for (int y = 0; y < 5 * n; ++y) {\n                avgs[y % 5] += c[x * 5 * n + y] = a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = avgs[y] / n;\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                d[x * 5 * n + y] = c[x * 5 * n + y] - avgs[y % 5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host_avgs[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            if (fabs(c[x * 5 * n + y] - (a[x * n * 5 + y] + b[x * n * 5 + y])) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = host_avgs[y] / n;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(d[x * 5 * n + y] - (c[x * 5 * n + y] - host_avgs[y % 5])) > PRECISION){\n                err += 1;\n            \n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop_type_check_pt1.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1:private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * n * sizeof(char));\n    char * c = (char *)malloc(10 * n * sizeof(char));\n    char * d = (char *)malloc(10 * n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n    char temp;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n],b[0:10*n], c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(total)\n        for (int x = 0; x < 10; ++x) {\n            total = 10;\n            #pragma acc loop worker reduction(+:total)\n            for (int y = 0; y < n; ++y) {\n                total += a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] + total;\n            }\n        }\n    }\n    int error_count = 0;\n    int total_count = 0;\n    for (int x = 0; x < 10; ++x) {\n        host_total = 10;\n        for (int y = 0; y < n; ++y) {\n            host_total += a[x * n + y] + b[x * n + y];\n        }\n        for (int y = 0; y < n; ++y) {\n            temp = host_total + c[x * n + y];\n            if (d[x * n + y] != temp) {\n                err += 1;\n                error_count += 1;\n                printf(\"Error location x: %d \\t y: %d\\n\", x, y); \n                printf(\"%d != %d\\n\", d[x * n + y], temp);\n            }\n            total_count += 1;\n        }\n    }\n\n    //printf(\"%d out of %d failed\\n\", error_count, total_count);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * c_host = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n        c_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            c_host[x * 5 + (y % 5)] += a[x * 5 * n + y] + b[x * 5 * n + y];\n        }\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        if (fabs(c[x] - c_host[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 5 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5/n));\n    char result[5];\n    char host_result[5];\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 1;\n        host_result[x] = 1;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] && a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] && a[x];\n    }\n\n    for (int x = 0; x < 5; ++x){\n        if (host_result[x] != result[x]) {\n            err += 1;\n        } \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                a[x * n + y] = a[x * n + y] ^ temp;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 25 * sizeof(char));\n    char * a_copy = (char *)malloc(n * 25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        device[x] = 1;\n        host[x] = 1;\n        for (int y = 0; y < 5; ++y) {\n            has_false[x * 5 + y] = 0;\n        }\n    }\n\n    for (int x = 0; x < 25 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else {\n            a[x] = 0;\n            a_copy[x] = 0;\n            has_false[x % 25] = 1;\n        }\n    }\n\n    #pragma acc data copy(a[0:25*n])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop worker reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                a[x * 5 * n + y] = a[x * 5 * n + y] ^ device[y%5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a_copy[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (a[x * 5 * n + y] != (a_copy[x * 5 * n + y] ^ host[y % 5])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(25 * n * sizeof(char));\n    char * b = (char *)malloc(25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin) {\n                a[x] = 1;\n            }\n            else {\n                a[x] = 0;\n                has_false[x * 5 + y % 5];\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop vector reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y){\n                b[x * 5 + y] = device[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != host[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    b = a[0];\n    host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int device[10];\n    unsigned int host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        device[x] = 0;\n        host[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            device[x] += 1<<y;\n            host[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(&:device)\n        for (int x = 0; x < 10 * n; ++x) {\n            device[x%10] = device[x%10] & a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host[x%10] = host[x%10] & a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host[x] != device[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int * host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int device[5];\n    unsigned int host[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop worker reduction(&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = device[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (host[y] != c[x * 5 + y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (b[x * 5 * n + y] != (host[y%5] + b_copy[x * 5 * n + y])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copyout(b[0:10])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int c[5];\n    unsigned int * b_host = (unsigned int *)malloc(5 * sizeof(unsigned int));\n    \n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copyout(b[0:25])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                c[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 0; y < 5 * n; ++y) {\n                c[y%5] = c[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = c[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            b_host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            b_host[y%5] = b_host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b_host[y] != b[x * 5 + y]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(5 * n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int b[5];\n    unsigned int host_b[5];\n\n    for (int x = 0; x < 5 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t) RAND_MAX > false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < 5 * n; ++x) {\n            b[x%5] = b[x%5] | a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x){\n        host_b[x%5] = host_b[x%5] | a[x];\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                a[x * n + y] += (1<<z);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int temp[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 25 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += (1<<y);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x){\n        for (int y = 0; y < 5; ++y){\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y){\n            if (c[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if ((b_copy[x * 5 * n + y] + c[x * 5 + (y % 5)]) != b[x * 5 * n + y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int reduced[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(|:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != reduced[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int b[10];\n    unsigned int host_b[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < 10 * n; ++x) {\n            b[x % 10] = b[x % 10] ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_b[x % 10] = host_b[x % 10] ^ a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,nonvalidating,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        temp[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y){\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t maximums[10];\n    real_t max_host[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        maximums[x] = 0;\n        max_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(max:maximums)\n        for (int x = 0; x < 10 * n; ++x) {\n            maximums[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        max_host[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n    }\n    \n    for (int x = 0; x < 10; ++x) {\n        if (fabs(max_host[x] - maximums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * host_maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximum[x] = 0;\n        host_maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(c[0:25*n], maximum[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], temp[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximum[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            host_maximum[x * 5 + (y % 5)] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], host_maximum[x * 5 + (y % 5)]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(host_maximum[x * 5 + y] - maximum[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximums[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(maximums[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(max:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(maximums[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc parallel loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t minimums[10];\n    real_t host_minimums[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        minimums[x] = 1000;\n        host_minimums[x] = 1000;\n    }\n\n    printf(\"Here\");\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(min:minimums)\n        for (int x = 0; x < 10 * n; ++x) {\n            minimums[x%10] = fmin(a[x] * b[x], minimums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_minimums[x%10] = fmin(a[x] * b[x], host_minimums[x%10]);\n    }\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(minimums[x] - host_minimums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t minimums[25];\n    real_t host_minimums[25];\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25], c[0:25*n])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_minimums[x * 5 + y] = reduced[y];\n            if (fabs(host_minimums[x * 5 + y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * minimums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop vector reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(reduced[y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc parallel loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n\n    real_t multiplicitive_total[10];\n\n    for (int x = 0; x < m_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        multiplicitive_total[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n])\n    {\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n        for (int x = 0; x < 10 * m_n; ++x) {\n            multiplicitive_total[x%10] = multiplicitive_total[x%10] * (a[x] + b[x]);\n        }\n    }\n\n    for (int x = 0; x < 10 * m_n; ++x) {\n        multiplicitive_total[x%10] /= (a[x] + b[x]);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(multiplicitive_total[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * m_n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n]) copyout(c[0:10*m_n], totals[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < m_n; ++y){\n                temp *= a[x * m_n + y] + b[x * m_n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < m_n; ++y){\n                c[x * m_n + y] = (a[x * m_n + y] + b[x * m_n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < m_n; ++y){\n            temp *= a[x * m_n + y] + b[x * m_n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < m_n; ++y){\n            if (fabs(c[x * m_n + y] - ((a[x * m_n + y] + b[x * m_n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * m_n * sizeof(real_t));\n\n    real_t * totals = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y%5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1() {\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x) {\n        a[x] = rand() / (real_t)RAND_MAX;\n        b[x] = rand() / (real_t)RAND_MAX;\n    }\n\n#pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n#pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x) {\n            temp = 1.0;\n#pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y) {\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < multiplicitive_n; ++y) {\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c[x] - 1) > PRECISION* (4 * multiplicitive_n - 1)) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2() {\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* totals = (real_t*)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[(x * 5) + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION){\n                err += 1;\n            }   \n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_loop_reduction_or_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char* a = (char *)malloc(5 * n * sizeof(char));\n    char result[5];\n    char host_result[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 0;\n        host_result[x] = 0;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) > false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] || a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] || a[x];\n    }\n    \n    for (int x = 0; x < 5; ++x) {\n        if (host_result[x] != result[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc parallel loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,vector,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "vector",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc parallel\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err + 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,present,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc parallel num_gangs(10) private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    real_t temp;\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t tempc = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc parallel present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_devnum.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n\t#pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n        for (int x = 0; x < n; ++x){\n\t    b[x] = a[x];\n        }\n\t#pragma acc update host(b[0:n]) wait(1)\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_queue.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1)\n        #pragma acc update host(f[0:n]) wait(2)\n        #pragma acc update host(g[0:n]) wait(3)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        avg += a[x]/(n * 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            real_t avg = 0.0;\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    avg = 0.0;\n    for (int x = 0; x < n; ++x){\n        avg += a[x]/n;\n    }\n\n    if (avg < 1000 || avg > 1600){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "reference_count_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_function_identifier_unnamed(a[x], n) + b[x]) > PRECISION)){\n            err += 1;\n            return 1;\n        }\n        else if ((on_host) && (fabs(host_function_identifier_unnamed(a[x], n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_unnamed(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_unnamed(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_identifier_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_identifier_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_bind_nonprototype_function_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_gang.c": {
                "num tests": 10,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x)\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_gang_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "10": {
                        "content": "#ifndef T10\n//T10:routine,construct-independent,V:2.0-2.7\nint test10(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T10\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test10();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 9);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "9": {
                        "content": "#ifndef T9\n//T9:routine,construct-independent,V:2.0-2.7\nint test9(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T9\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test9();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 8);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_nohost.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t summation;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                b[x] = function(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        summation = 0;\n        for (int y = 0; y < n; ++y){\n            summation += a[x][y];\n        }\n        if (fabs(summation - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_seq.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_seq_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_vector.c": {
                "num tests": 6,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_vector_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_worker.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_worker_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc serial async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc serial async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc serial wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc serial copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc serial copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc serial copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 2;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,data,data-region,reference-counting,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n        #pragma acc serial create(zero: b[0:n]) copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default-mapping,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,default-mapping,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc serial default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc serial deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 10; ++y){\n            if (fabs(d[x * 10 + y] - (a[x * 10 + y] + b[x * 10 + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,firstprivate,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    c[y] = a[x * 10 + y] - b[x * 10 + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,if,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc serial if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,if,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,if,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy cluase test with serial default(none) and reduction with scalar variables\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial default(none) reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += (1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with serial loop and reduction with scalar\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial loop reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += (1 << 1);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only serial and reduction with scalar variables\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host = rand()/(real_t)(RAND_MAX/10);\n\tint device = host;\n\t#pragma acc serial reduction(+:device)\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice += device;\n\t}\n\n\tif( fabs(host - device) > PRECISION ){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += (1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *) malloc ( n *sizeof(real_t));\n        real_t *device_array = (real_t *) malloc ( n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n                host_array[x] = rand()/ (real_t)(RAND_MAX/10);\n                device_array[x] = host_array[x];\n        }\n\t\n\t#pragma acc serial loop\n\tfor ( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\t\n\tfor( int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n                        err = 1;\n                }\n        }\n        free(host_array);\n        free(device_array);\n        return err;\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += (1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "serial_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc serial loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,async,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,auto,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 0; x < n; ++x){\n        b[x] = a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(b[x] - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 1; x < n; ++x){\n        a[x] = a[x - 1] + a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      rolling_total += a_copy[x];\n      if (fabs(rolling_total - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    char temp = 1;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc serial\n\t{   \n\t\t#pragma acc loop gang private(temp)\n        \tfor (int y = 0; y < 10; ++y){\n            \t\ttemp = a[y * n];\n            \t\t#pragma acc loop worker reduction(&:temp)\n           \t\tfor (int x = 1; x < n; ++x){\n               \t\ttemp = temp & a[y * n + x];\n            \t\t}\n            \t\n\t\t\tc[y] = temp;\n            \t\n\t\t\t#pragma acc loop worker\n            \t\tfor (int x = 0; x < n; ++x){\n\t       \t\t\tb[y * n + x] = b[y * n + x] + c[y];\n            \t\t}\n        \t}\n    \t}\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n    unsigned int c = 0;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int host_c;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int host_b;\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc serial loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc serial loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc serial loop reduction (*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc serial \n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    {\n        #pragma acc serial \n\t{\n\t#pragma loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc serial loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,tile,combined-constructs,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "tile",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,tile,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc serial loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc serial\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc serial\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err + 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,present,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc serial present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "present"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,private,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc serial private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc serial copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,default-mapping,serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "default-mapping",
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    real_t tempc = 0.0;\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,executable-data,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc serial present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "executable-data",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int y = 0; y < 10; ++y){\n        avg = 0.0;\n        for (int x = 0; x < n; ++x){\n            avg += a[y * n + x]/n;\n        }\n\n        if (avg < 1000 || avg > 1500){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,set,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc set default_async(1)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc set default_async(2)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "set",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,devonly,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            #pragma acc set device_num(x)\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "devonly",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(host)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(multicore)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:set,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(default)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n\tint err = 0;\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc set device_type(host) device_num(device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(multicore) device_num(device_num)\n\n        return err;\t\n}\n#endif\n#ifndef T2\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test2();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 1);\n    \t}\n#endif \n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic",
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test3(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(default) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T3\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test3();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 2);\n    \t}\n#endif \n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "set_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n        int err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(nvidia) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(nvidia)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_type = acc_get_device_type();\n\n\t#pragma acc set if(acc_get_device_type == device_type)\n\n\treturn err;\t\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n        srand(SEED);\n        int device_type = acc_get_device_type();\n\n        #pragma acc set if(acc_get_device_type != device_type)\n\n        return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc shutdown\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:shutdown,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:shutdown,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(host) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:shutdown,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:shutdown,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(default) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num == device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num != device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed = failed + test2();\n        }\n        if (failed != 0){\n                failcode = failcode + (1 << 1);\n        }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "wait_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tc[x] = a[x] + b[x];\n\t    }\n\t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(true)\n    }\n    \n    for (int x = 0; x < n; ++x){\n\tif (abs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n\tif (abs(f[x] - (d[x] + e[x])) > PRECISION){\n\t    err++;\n\t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(true)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test2();\n    }\n    if (failed){\n\tfailcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    \n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t        c[x] = a[x] + b[x];\n\t    }\n \t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(false)\n    }\n        \n    for (int x = 0; x < n; ++x){\n\tif (c[x] > PRECISION){\n\t    err++;\n\t}\n\tif (f[x] > PRECISION){\n\t    err++\n\t}\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(false)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if (failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_devnum_false.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n    \t#pragma acc update host(c.data[0:n]) wait(1) if(false)\n\t#pragma acc update host(f.data[0:n]) wait(2) if(false)\n\t#pragma acc update host(g.data[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c.data[x] > PRECISION){\n            err++;\n        }\n        if (f.data[x] > PRECISION){\n\t    err++;\n\t}\n        if (g.data[x] > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(false)\n        #pragma acc update host(f[0:n]) wait(2) if(false)\n        #pragma acc update host(g[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c[x] > PRECISION){\n\t    err++;\n\t}\n        if(f[x] > PRECISION){\n            err++;\n        }\n        if(g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n]) wait(1) if(false)\n        #pragma acc update host(f.data[0:n]) wait(2) if(false)\n        #pragma acc update host(g.data[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c.data[x] > PRECISION){\n            err++;\n        }\n        if(f.data[x] > PRECISION){\n            err++;\n        }\n        if(g.data[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(false)\n        #pragma acc update host(f[0:n]) wait(2) if(false)\n        #pragma acc update host(g[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++;\n        }\n        if (g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_devnum_true.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n    \t#pragma acc update host(c.data[0:n]) wait(1) if(true)\n\t#pragma acc update host(f.data[0:n]) wait(2) if(true)\n\t#pragma acc update host(g.data[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c.data[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f.data[x] - (d.data[x] + e.data[x])) > PRECISION){\n\t    err++;\n\t}\n        if (abs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(true)\n        #pragma acc update host(f[0:n]) wait(2) if(true)\n        #pragma acc update host(g[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n]) wait(1) if(true)\n        #pragma acc update host(f.data[0:n]) wait(2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c.data[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f.data[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(true)\n        #pragma acc update host(f[0:n]) wait(2) if(true)\n        #pragma acc update host(g[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f[x] - (d.data[x] + e.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_queue_false.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n\t#pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(false)\n\t#pragma acc update host(g.data[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c.data[x] > PRECISION){\n            err++;\n        }\n        if (f.data[x] > PRECISION){\n\t    err++;\n\t}\n        if (g.data[x] > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c[x] > PRECISION){\n\t    err++;\n\t}\n        if(f[x] > PRECISION){\n            err++;\n        }\n        if(g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n\n        #pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c.data[x] > PRECISION){\n            err++;\n        }\n        if(f.data[x] > PRECISION){\n            err++;\n        }\n        if(g.data[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++;\n        }\n        if (g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_queue_true.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n\n\t#pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c.data[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f.data[x] - (d.data[x] + e.data[x])) > PRECISION){\n\t    err++;\n\t}\n        if (abs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c.data[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f.data[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f[x] - (d.data[x] + e.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}
